---
#########################################
- alias: "Security: line crossing template - telegram & tv notify"
  description: "When something crosses a line on the driveway or porch, notify via telegram and LG TV"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.driveway_line_crossing
        - binary_sensor.front_door_line_crossing
      to: "on"
  action:
    - service: notify.living_room_tv
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} detected"
    - service: notify.telegram_jon
      data_template:
        title: "{{ trigger.to_state.attributes.friendly_name }}"
        message: "{{ trigger.to_state.attributes.friendly_name }}"
        data:
          photo:
            url: >
              {% if trigger.entity_id == 'binary_sensor.driveway_line_crossing' %}
                {{ states.sensor.hik_driveway_pic.state }}
              {% elif trigger.entity_id == 'binary_sensor.front_door_line_crossing' %}
                {{ states.sensor.db_pic.state }}
              {% endif %}
#########################################
- alias: "Security: front door line crossing or doorbell rang & dark out & house occupied & foyer and exterior lights on"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door_line_crossing
      to: "on"
    - platform: event
      event_type: doorbird_front_door_doorbell
  condition:
    - condition: state
      entity_id: binary_sensor.alarm_occupancy_status
      state: "on"
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
    - condition: sun
      after: sunset
      after_offset: "-1:00:00"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.exterior_foyer, switch.exterior_cans
    - service: script.popup_camera
      data:
        deviceID: "wallpanel"
        camera: "camera.front_door_live"
#########################################
- alias: "Security: front door line crossing or doorbell rang & dark out & house unoccupied & foyer and exterior lights on for 10 min"
  trigger:
    - platform: state
      entity_id: binary_sensor.front_door_line_crossing
      to: "on"
    - platform: event
      event_type: doorbird_front_door_doorbell
  condition:
    - condition: state
      entity_id: binary_sensor.alarm_occupancy_status
      state: "off"
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
    - condition: sun
      after: sunset
      after_offset: "-1:00:00"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.exterior_foyer, switch.exterior_cans
    - service: timer.start
      entity_id: timer.front_door_motion_timer
- alias: "Security: turn off foyer and exterior lights 10 minutes after trigger"
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.front_door_motion_timer
  action:
    - service: homeassistant.turn_off
      data:
        entity_id:
          - switch.exterior_foyer
#########################################
- alias: "Security: doorbell rang & play google home video"
  trigger:
    - platform: event
      event_type: doorbird_front_door_doorbell
  action:
    - service: media_player.play_media
      data_template:
        entity_id: media_player.main_googlehome
        media_content_id: "http://192.168.45.249:8123/api/camera_proxy_stream/camera.front_door_live?token={{ states.camera.front_door_live.attributes.access_token }}"
        media_content_type: image/jpg
    - delay: "00:00:30"
    - service: media_player.turn_off
      data:
        entity_id: media_player.main_googlehome
#########################################
- alias: "Security: doorbell rang & interrupt sonos master"
  trigger:
    - platform: event
      event_type: doorbird_front_door_doorbell
  condition:
    - condition: state
      entity_id: media_player.master
      state: "playing"
  action:
    - service: script.sonos_say
      data:
        sonos_entity: media_player.master
        volume: 0.5
        message: "doorbell rang!"
        delay: "00:00:05"
#########################################
- alias: "Automatic Lighting: deck person & dark out & deck lights on"
  trigger:
    - platform: state
      entity_id: binary_sensor.deck_person
      to: "on"
    - platform: state
      entity_id: binary_sensor.deckstairs_person
      to: "on"
  condition:
    - condition: state
      entity_id: sensor.period_of_day
      state: "night"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_deck_on
- alias: "Automatic Lighting: deck lights off when no person detected for 10min"
  trigger:
    - platform: state
      entity_id: binary_sensor.deck_person
      to: "off"
      for:
        minutes: 10
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_deck_off
#########################################
- alias: "Automatic Lighting: deck motion light - timer start"
  trigger:
    - platform: state
      entity_id: binary_sensor.sunroom_pir
      to: "on"
  action:
    - service: timer.start
      entity_id: timer.deck_timer
- alias: "Automatic Lighting: deck lights on when deck door opens (and the timer is running) - shows direction of travel"
  trigger:
    - platform: state
      entity_id: sensor.deck_door
      to: "Violated"
  condition:
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
    - condition: state
      entity_id: timer.deck_timer
      state: "active"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_deck_on
#########################################
- alias: "Automatic Lighting: garage person/motion detected & dark out & garage lights on"
  trigger:
    - platform: state
      entity_id: binary_sensor.garage_person
      to: "on"
    - platform: state
      entity_id: binary_sensor.garage_motion
      to: "on"
  condition:
    - condition: state
      entity_id: sensor.period_of_day
      state: "night"
  action:
    - service: homeassistant.turn_on
      entity_id: light.mudroom_garage_lights
- alias: "Automatic Lighting: garage lights off when no person detected for 15min"
  trigger:
    - platform: state
      entity_id: binary_sensor.garage_motion
      to: "off"
      for:
        minutes: 15
  condition:
    - condition: state
      entity_id: light.mudroom_garage_lights
      state: "on"
  action:
    - service: homeassistant.turn_off
      entity_id: light.mudroom_garage_lights
#########################################
- alias: "Automatic Lighting: wake up (only between Oct-May) & turn on some lights"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      from: "on"
      to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
    - condition: or
      conditions:
        - condition: template
          value_template: '{{ now().strftime("%m")|int > 10 }}'
        - condition: template
          value_template: '{{ now().strftime("%m")|int < 4 }}'
  action:
    - service: homeassistant.turn_on
      entity_id: switch.upstairs_hall_treads, switch.great_room_lamp
#########################################
- alias: "Automatic Lighting: motion light template for foyer & basement & and bar"
  trigger:
    - platform: state
      entity_id:
        - sensor.foyer_pir
        - sensor.basement_pir
        - sensor.bar_pir
      to: "Violated"
    - platform: state
      entity_id:
        - sensor.foyer_pir
        - sensor.basement_pir
        - sensor.bar_pir
      to: "Normal"
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: input_boolean.block_all_motion_lights
      state: "off"
  action:
    service_template: >
      {% if trigger.to_state.state == 'Violated' %}homeassistant.turn_on
      {% else %}homeassistant.turn_off{% endif %}
    data_template:
      entity_id: >
        {% set trigger_entity = trigger.entity_id %}
        {% if trigger_entity == 'sensor.foyer_pir' %}
          switch.exterior_foyer
        {% elif trigger_entity == 'sensor.basement_pir' %}
          switch.basement_main
        {% elif trigger_entity == 'sensor.bar_pir' %}
          switch.basement_bar_cabinets
        {% endif %}
#########################################
# Close master blinds if its dusk upon 1st motion on the entry only 1 time (after 1hr before sunset)
- alias: "Blinds: master blinds at dusk & only runs once (and after 1hr before sunset)"
  trigger:
    - platform: state
      entity_id: binary_sensor.master_entry_pir
      to: "on"
  condition:
    - condition: state
      entity_id: input_boolean.master_blinds_run_once
      state: "off"
    - condition: sun
      after: sunset
      after_offset: "-1:00:00"
  action:
    - service: scene.turn_on
      entity_id: scene.master_half
    - service: homeassistant.turn_on
      entity_id: input_boolean.master_blinds_run_once
#########################################
- alias: "Blinds: close master blinds at sunset"
  trigger:
    - platform: sun
      event: sunset
  action:
    - service: scene.turn_on
      entity_id: scene.master_closed
    - service: homeassistant.turn_on
      entity_id: input_boolean.master_blinds_run_once
#########################################
- alias: "Blinds: open master blinds in the morning (after 45min of unoccupied bed)"
  trigger:
    - platform: state
      entity_id: sensor.master_bed_people
      to: "nobody"
      for:
        minutes: 45
  condition:
    - condition: state
      entity_id: input_boolean.master_blinds_run_once
      state: "on"
    - condition: time
      before: "11:00:00"
      after: "06:00:00"
  action:
    - service: scene.turn_on
      entity_id: scene.master_half
    - service: homeassistant.turn_off
      entity_id: input_boolean.master_blinds_run_once
#########################################
- alias: "Utility: reset run-once variables - noon"
  trigger:
    platform: time
    at: "12:00:00"
  action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.sunset_run_once
#########################################
- alias: "Night Mode: start sleeping & set HVAC fans on & turn off recirculation pump & all lights off if no guests (only exterior & lower & & main if guests) & and main tv off"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      to: "on"
  action:
    - service: scene.turn_on
      data_template:
        entity_id: >
          {% if is_state('input_boolean.guests', 'on') %}
            scene.equipment_room_enclosure_device_001_ph_main_lower_ext_off
          {% else %}
            scene.equipment_room_enclosure_device_001_ph_all_but_master
          {% endif %}
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.basement_thermostat
          - climate.main_thermostat
          - climate.upstairs_thermostat
        fan_mode: "on"
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
    - service: webostv.command
      data:
        entity_id: media_player.living_room_tv
        command: "system/turnOff"
#########################################
- alias: "Night Mode: start sleeping & check the garage doors"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      to: "on"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: sensor.double_garage
        state: "Violated"
      - condition: state
        entity_id: sensor.single_garage
        state: "Violated"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Garage Door is Open!"
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}!"
#########################################
- alias: "Night Mode: check the door locks"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      to: "on"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: lock.front_door_lock
        state: "unlocked"
      - condition: state
        entity_id: lock.garage_door_lock
        state: "unlocked"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "{{ states.sensor.doors_unlocked_number.state }} door(s) UNLOCKED!"
        message: "Locking {{ states.sensor.doors_unlocked.state }}"
    - service: script.lock_doors
#########################################
- alias: "Wake Up State: done sleeping & HVAC fan off & recirculation pump on"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      to: "off"
  action:
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.basement_thermostat
          - climate.main_thermostat
          - climate.upstairs_thermostat
        fan_mode: "auto"
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
#########################################
- alias: "Away Mode: turn the HVAC fans on & recirculation pump and tvs off"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "off"
  action:
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.basement_thermostat
          - climate.main_thermostat
          - climate.upstairs_thermostat
        fan_mode: "on"
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
    - service: script.tvs_off
#########################################
- alias: "Away Mode: away during the day & turn lights off"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "on"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_all_off
#########################################
- alias: "Home Mode: return home & turn the HVAC fans off & the recirculation pump on & stop daisy cam timer"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "on"
  action:
    - service: climate.set_fan_mode
      data:
        entity_id:
          - climate.basement_thermostat
          - climate.main_thermostat
          - climate.upstairs_thermostat
        fan_mode: "auto"
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
    - service: timer.cancel
      entity_id: timer.daisy_cam_timer
########################################
- alias: "Night Mode: turn on sunset lights at dark or sunset"
  trigger:
    - platform: state
      entity_id: binary_sensor.light_inside
      to: "off"
      for:
        minutes: 5
    - platform: sun
      event: sunset
  condition:
    - condition: state
      entity_id: input_boolean.sunset_run_once
      state: "off"
    - condition: state
      entity_id: input_boolean.motion_lights
      state: "on"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_sunset1
    - service: homeassistant.turn_on
      entity_id: input_boolean.sunset_run_once
########################################
- alias: "Fans: turn on master fan at night (if AC is on)"
  trigger:
    - platform: time
      at: "20:00:00"
  condition:
    - condition: state
      entity_id: climate.main_thermostat
      state: cool
    - condition: state
      entity_id: binary_sensor.vacation_status
      state: "off"
  action:
    - service: light.turn_on
      data:
        entity_id: light.master_bedroom_master_fan
        brightness_pct: 50
########################################
- alias: "Fans: turn off master fan in the morning"
  trigger:
    - platform: time
      at: "09:00:00"
  action:
    - service: light.turn_off
      entity_id: light.master_bedroom_master_fan
#########################################
- alias: "Away Mode: check the front door lock when leaving"
  trigger:
    - platform: state
      entity_id: binary_sensor.vacation_status
      to: "on"
    - platform: state
      entity_id: sensor.armed_status
      to: "armed_away"
  condition:
    - condition: state
      entity_id: lock.front_door_lock
      state: "unlocked"
  action:
    - service: notify.telegram_jon
      data:
        title: "Front Door is UNLOCKED!"
        message: "Locking the front door"
    - service: lock.lock
      entity_id: lock.front_door_lock
#########################################
- alias: "HVAC: winter indoor humidity check & see if its below the high threshold"
  trigger:
    - platform: time
      at: "10:00:00"
  condition:
    - condition: template
      value_template: "{{ ( states.sensor.house_humidity.state  ) > ( states.sensor.target_humidity_max_winter.state ) }}"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Humidity Warning!"
        message: "Humidity in the house is too high: {{ states.sensor.house_humidity.state }}"
#########################################
- alias: "HVAC: winter indoor humidity check & see if its above the low threshold"
  trigger:
    - platform: time
      at: "10:01:00"
  condition:
    - condition: template
      value_template: "{{ ( states.sensor.house_humidity.state  ) < ( states.sensor.target_humidity_min_winter.state ) }}"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Humidity Warning!"
        message: "Humidity in the house is too low: {{ states.sensor.house_humidity.state }}"
#########################################
- alias: "Moisture: if there is a water leak & notify & close the water valve & turn off recirculation pump"
  trigger:
    - platform: state
      entity_id: binary_sensor.moisture_sensors
      to: "on"
  action:
    - service: homeassistant.turn_off
      data:
        entity_id:
          - switch.equipment_room_recirculation_pump
          - switch.water_main_shut_off
    - service: notify.telegram_jon
      data:
        title: "Water Leak!"
        message: "HomeAssistant detected a water leak"
#########################################
- alias: "Security: dog walker here between 9:30-2pm (while the alarm is not disarmed)"
  trigger:
    - platform: state
      entity_id: sensor.garage_door
      to: "Violated"
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.armed_status', 'disarmed') }}"
    - condition: time
      before: "14:00:00"
      after: "09:30:00"
  action:
    - service: script.video_daisy
#########################################
- alias: "Alarm: fire active & unlock locks & send videos & lights set to 25% & hvac off & repeat notifications"
  trigger:
    - platform: state
      entity_id: sensor.alarm_state
      to: "fire_alarm"
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.alarm_notifier
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_fire
    - service: lock.unlock
      data:
        entity_id:
          - lock.garage_door_lock
          - lock.front_door_lock
    - service: script.alarm
#########################################
- alias: "Alarm: burglar active & lights on & send videos & repeat notifications"
  trigger:
    - platform: state
      entity_id: sensor.alarm_state
      to: "burglar_alarm"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_burglar
    - service: script.alarm
#########################################
- alias: "Alarm: turn off alarm notifications because of user interaction"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/turnoffnotification"
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Disabling notifications for {{ trigger }}"
        show_alert: true
    - service: input_boolean.turn_off
      entity_id: input_boolean.alarm_notifier
########################################
- alias: "Automatic Lighting: master entry motion light when master bed is unoccupied"
  trigger:
    platform: state
    entity_id: binary_sensor.master_entry_pir
    to: "on"
  condition:
    - condition: state
      entity_id: sensor.master_bed_people
      state: "nobody"
    - condition: state
      entity_id: input_boolean.motion_lights
      state: "on"
  action:
    - service: lifx.set_state
      data:
        entity_id: light.master_entry_lifx
        power: true
########################################
- alias: "Automatic Lighting: master entry motion lights Off"
  trigger:
    - platform: state
      entity_id: binary_sensor.master_entry_pir
      to: "off"
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: input_boolean.master_override
      state: "off"
  action:
    - service: homeassistant.turn_off
      entity_id: light.master_entry_lifx
########################################
# sitting room light scenarios
# - motion in sitting while bed has nobody
# - sitting light on when chair occupied
# - no motion for a while (and chair unoccupied), turn off
# - sitting light off when bed occupied (& chair unoccupied)
# - sitting light off when chair unoccupied (& bed occupied)
########################################
- alias: "Automatic Lighting: sitting motion light when master bed is unoccupied"
  trigger:
    platform: state
    entity_id: binary_sensor.sitting_room_pir
    to: "on"
  condition:
    - condition: state
      entity_id: sensor.master_bed_people
      state: "nobody"
    - condition: state
      entity_id: input_boolean.motion_lights
      state: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: light.sitting_room_lifx
########################################
- alias: "Automatic Lighting: sitting motion light off when master override is off"
  trigger:
    - platform: state
      entity_id: binary_sensor.sitting_room_pir
      to: "off"
      for:
        minutes: 10
  condition:
    - condition: state
      entity_id: input_boolean.master_override
      state: "off"
  action:
    - service: homeassistant.turn_off
      entity_id: light.sitting_room_lifx
########################################
- alias: "Automatic Lighting: sitting light off when bed occupied (& chair unoccupied)"
  trigger:
    - platform: state
      entity_id: sensor.master_bed_people
      from: "nobody"
      to: "one"
    - platform: state
      entity_id: sensor.master_bed_people
      from: "nobody"
      to: "both"
  condition:
    - condition: state
      entity_id: sensor.master_sitting_chair_occupied
      state: "unoccupied"
  action:
    - service: homeassistant.turn_off
      entity_id: light.sitting_room_lifx
########################################
- alias: "Automatic Lighting: sitting light off when chair unoccupied (& bed occupied)"
  trigger:
    - platform: state
      entity_id: sensor.master_sitting_chair_occupied
      from: "occupied"
      to: "unoccupied"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: sensor.master_bed_people
        state: "one"
      - condition: state
        entity_id: sensor.master_bed_people
        state: "both"
  action:
    - service: homeassistant.turn_off
      entity_id: light.sitting_room_lifx
########################################
- alias: "Automatic Lighting: kitchen lights off with no motion for 15 minutes"
  trigger:
    - platform: state
      entity_id: sensor.kitchen_pir
      to: "Normal"
      for:
        minutes: 15
  condition:
    - condition: state
      entity_id: input_boolean.block_all_motion_lights
      state: "off"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_kitchen_off
########################################
- alias: "Daisy: daisy cam photo every 45 minutes when armed away and kennel closed"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "off"
  condition:
    - condition: state
      entity_id: binary_sensor.daisy_contact
      state: "off"
    - condition: state
      entity_id: binary_sensor.vacation_status
      state: "off"
  action:
    - service: timer.start
      entity_id: timer.daisy_cam_timer
- alias: "Daisy: daisy timer completed"
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.daisy_cam_timer
  condition:
    - condition: state
      entity_id: binary_sensor.alarm_occupancy_status
      state: "off"
    - condition: state
      entity_id: binary_sensor.daisy_contact
      state: "off"
  action:
    - service: script.video_daisy
    - service: timer.start
      entity_id: timer.daisy_cam_timer
#########################################
- alias: "Automatic Lighting: enable motion lights 2hours before sunset & disable 2hour after sunrise"
  trigger:
    - platform: sun
      event: sunset
      offset: "-02:00:00"
  action:
    - service: homeassistant.turn_on
      entity_id: input_boolean.motion_lights
- alias: "Automatic Lighting: disable motion lights 2hours sunrise"
  trigger:
    - platform: sun
      event: sunrise
      offset: "+02:00:00"
  action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.motion_lights
########################################
- alias: "Automatic Lighting: kitchen motion light"
  trigger:
    platform: state
    entity_id: binary_sensor.living_room_multi_motion
    to: "Violated"
  condition:
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
    - condition: state
      entity_id: input_boolean.motion_lights
      state: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.kitchen_cabinets
########################################
- alias: "Automatic Lighting: basement lights off with no motion"
  trigger:
    - platform: state
      entity_id: binary_sensor.basement_motions
      from: "on"
      to: "off"
      for:
        minutes: 30
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_basement_off
########################################
- alias: "Fans: patio fan off"
  trigger:
    - platform: time
      at: "00:00:00"
    - platform: time
      at: "03:00:00"
    - platform: time
      at: "05:00:00"
    - platform: time
      at: "07:00:00"
    - platform: state
      entity_id: fan.patio_fan
      to: "on"
      for:
        minutes: 60
  action:
    - service: homeassistant.turn_off
      entity_id: fan.patio_fan
########################################
- alias: "Automatic Lighting: backyard party lights"
  trigger:
    - platform: state
      entity_id: sensor.basement_door
      to: "Violated"
  condition:
    - condition: state
      entity_id: input_boolean.party
      state: "on"
  action:
    - service: scene.turn_on
      entity_id:
        - scene.basement_keypad_theater
        - scene.basement_keypad_bar
#########################################
- alias: "Security: Elk Alarm trouble notification"
  trigger:
    - platform: state
      entity_id: sensor.alarm_trouble
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.alarm_trouble', '') }}"
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
#########################################
- alias: "Security: doorbell notification event capture and notify"
  trigger:
    - platform: event
      event_type: doorbird_front_door_doorbell
  action:
    - service: notify.telegram_jon
      data:
        message: "doorbell rang"
#########################################
- alias: "Work: victorops notification - turn on light"
  trigger:
    - platform: template
      value_template: "{{ 'com.victorops.androidclient' in states.sensor.pixel_3_ariela_notification_grabber_sensor.attributes['packageName'] }}"
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.period_of_day', 'day') }}"
    - condition: state
      entity_id: person.jon
      state: "home"
  action:
    - service: notify.telegram_jon
      data:
        message: "ALERT! Work page"
    - service: homeassistant.turn_on
      entity_id: light.master_bedroom_jons_lamp
#########################################
- alias: "Utility: general notifications"
  trigger:
    - platform: state
      entity_id:
        - sensor.public_ip
        - binary_sensor.rain_sensor
    - platform: template
      value_template: "{{ not (is_state('sensor.alarm_state', 'no_alarm_active') or is_state('sensor.alarm_state', 'entrance_delay_active')) }}"
    - platform: state
      entity_id:
        - binary_sensor.office_multi_tamper
        - binary_sensor.kitchen_fridge_door_tamper
        - binary_sensor.updater
      to: "on"
    - platform: numeric_state
      entity_id: sensor.kitchen_fridge_door_temperature_measurement
      above: "44"
      for:
        minutes: 20
    - platform: numeric_state
      entity_id: sensor.kitchen_fridge_door_temperature_measurement
      below: "30"
      for:
        minutes: 20
    - platform: state
      entity_id: sensor.elkm1
      to: "Disconnected"
    - platform: numeric_state
      entity_id:
        - sensor.keypad004
        - sensor.master_entry_temperature
      above: "84"
      for:
        minutes: 15
    - platform: numeric_state
      entity_id:
        - sensor.keypad004
        - sensor.master_entry_temperature
      below: "55"
      for:
        minutes: 15
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
#########################################
- alias: "Utility: UPS notifications"
  trigger:
    - platform: event
      event_type: nut.ups_event
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.event.data.notify_msg }}"
#########################################
- alias: "Notifications: important date (birthday & anniversary)"
  trigger:
    - platform: time
      at: "07:00:00"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Important date closing in!"
        message: >
          {% for state in states if (('birthday' in state.entity_id or 'anniversary' in state.entity_id) and state.state | int == 14) %}
          {{state.name}}
          {% endfor %}
#########################################
- alias: "Utility: create all groups"
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: script.group_set
      data_template:
        object_id: all_locks
        name: All Locks
        types: "lock"
#########################################
- alias: "Security: popup camera"
  trigger:
    - platform: state
      entity_id: light.master_bedroom_jons_lamp
      to: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: light.wallpanel
    - service: script.popup_camera
      data:
        deviceID: "37a201ed-e63fb778"
        camera: "camera.front_door_live"
    - delay: "00:00:30"
    - service: browser_mod.close_popup
#########################################
- alias: "Automatic Lighting: basement stairs motion - timer start"
  trigger:
    - platform: state
      entity_id: sensor.basement_stairs_pir
      to: "Violated"
  action:
    - service: timer.start
      entity_id: timer.basement_stairs_timer
- alias: "Automatic Lighting: basement lights on after stairs motion"
  trigger:
    - platform: state
      entity_id: sensor.bar_pir
      to: "Violated"
  condition:
    - condition: state
      entity_id: timer.basement_stairs_timer
      state: "active"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.basement_main
#########################################
- alias: "Automatic Lighting: storage & master toekick motion lights"
  trigger:
    - platform: state
      entity_id: sensor.storage_pir
      to: "Violated"
    - platform: state
      entity_id: sensor.storage_pir
      to: "Normal"
      for:
        minutes: 5
    - platform: state
      entity_id: binary_sensor.master_bedroom_occupancy
      to: "on"
    - platform: state
      entity_id: binary_sensor.master_bedroom_occupancy
      to: "off"
      for:
        minutes: 1
  action:
    - service_template: >
        {% if trigger.to_state.state in ['Violated', 'on'] %}homeassistant.turn_on
        {% else %}homeassistant.turn_off{% endif %}
      data_template:
        entity_id: >
          {% set trigger_entity = trigger.entity_id %}
          {% if trigger_entity == 'sensor.storage_pir' %}
            switch.basement_storage_lights
          {% elif trigger_entity == 'binary_sensor.master_bedroom_occupancy' %}
            light.master_bath_toekick
          {% endif %}
#########################################
- alias: "Automatic Lighting: office desk & gym lights motion on"
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.office_occupancy
        - binary_sensor.gym_occupancy
      to: "on"
  condition:
    - condition: state
      entity_id: binary_sensor.light_inside
      state: "off"
  action:
    - service: homeassistant.turn_on
      data_template:
        entity_id: >
          {% set trigger_entity = trigger.entity_id %}
          {% if trigger_entity == 'binary_sensor.office_occupancy' %}
            switch.office_lights
          {% elif trigger_entity == 'binary_sensor.gym_occupancy' %}
            light.gym_cans
          {% endif %}
#########################################
- alias: "Automatic Lighting: office desk & gym lights motion off"
  trigger:
    - platform: state
      entity_id: binary_sensor.office_occupancy
      to: "off"
      for:
        minutes: 2
    - platform: state
      entity_id: binary_sensor.gym_occupancy
      to: "off"
      for:
        minutes: 5
  action:
    - service: homeassistant.turn_off
      data_template:
        entity_id: >
          {% set trigger_entity = trigger.entity_id %}
          {% if trigger_entity == 'binary_sensor.office_occupancy' %}
            switch.office_lights
          {% elif trigger_entity == 'binary_sensor.gym_occupancy' %}
            light.gym_cans
          {% endif %}
#########################################
- alias: "Presence: office speakers on/off with presence"
  trigger:
    - platform: state
      entity_id: binary_sensor.office_occupancy
      to: "on"
    - platform: state
      entity_id: binary_sensor.office_occupancy
      to: "off"
      for:
        minutes: 21
  action:
    - service_template: >
        {% if trigger.to_state.state == 'on' %}homeassistant.turn_on
        {% else %}homeassistant.turn_off{% endif %}
      entity_id: switch.switch1
#########################################
- alias: "Work: wfh turn off recirculation pump"
  trigger:
    - platform: time
      at: "09:00:00"
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
  action:
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
#########################################
- alias: "Work: wfh turn on recirculation pump (only when somebody is home)"
  trigger:
    - platform: time
      at: "16:30:00"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
#########################################
- alias: "Notification: acknowledge garage single open"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ack_garagesingle
  action:
    - service: homeassistant.turn_off
      data:
        entity_id: alert.garage_door_single
#########################################
- alias: "Notification: acknowledge garage double open"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ack_garagedouble
  action:
    - service: homeassistant.turn_off
      data:
        entity_id: alert.garage_door_double
#########################################
- alias: "Automatic Lighting: toilet off when bathroom off"
  trigger:
    - platform: state
      entity_id: switch.master_bedroom_sitting_keypad_bathroom_led
      to: "off"
  condition:
    condition: or
    conditions:
      - condition: state
        entity_id: light.master_bedroom_fixture
        state: "on"
      - condition: state
        entity_id: switch.master_bedroom_toilet_fan
        state: "on"
  action:
    - service: homeassistant.turn_off
      entity_id:
        - light.master_bedroom_fixture
        - switch.master_bedroom_toilet_fan
