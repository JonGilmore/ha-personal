---
# #########################################
# - alias: "Security: line crossing template - telegram & tv notify"
#   id: "Security: line crossing template - telegram & tv notify"
#   description: "When something crosses a line on the driveway or porch, notify via telegram and LG TV"
#   trigger:
#     - platform: state
#       entity_id:
#         - binary_sensor.driveway_line_crossing
#         - binary_sensor.front_door_line_crossing
#       to: "on"
#   action:
#     - service: notify.living_room_tv
#       data_template:
#         message: "{{ trigger.to_state.attributes.friendly_name }} detected"
#     - service: notify.telegram_jon
#       data_template:
#         title: "{{ trigger.to_state.attributes.friendly_name }}"
#         message: "{{ trigger.to_state.attributes.friendly_name }}"
#         data:
#           photo:
#             url: >
#               {% if trigger.entity_id == 'binary_sensor.driveway_line_crossing' %}
#                 {{ states.sensor.hik_driveway_pic.state }}
#               {% elif trigger.entity_id == 'binary_sensor.front_door_line_crossing' %}
#                 {{ states.sensor.db_pic.state }}
#               {% endif %}
# #########################################
# - alias: "Security: front door line crossing or doorbell rang"
#   id: "Security: front door line crossing or doorbell rang"
#   description: "When its dark out - foyer and exterior lights on - handles both occupied & unoccupied states"
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.front_door_line_crossing
#       to: "on"
#     - platform: event
#       event_type: doorbird_front_door_doorbell
#   condition:
#     - condition: state
#       entity_id: binary_sensor.light_inside
#       state: "off"
#     - condition: sun
#       after: sunset
#       after_offset: "-1:00:00"
#   action:
#     - service: homeassistant.turn_on
#       entity_id: switch.exterior_foyer, switch.exterior_cans
#     - choose:
#         - conditions: "{{ is_state('binary_sensor.alarm_occupancy_status', 'on') }}"
#           sequence:
#             - service: script.popup_camera
#               data:
#                 deviceID: "wallpanel"
#                 camera: "camera.front_door_live"
#       default:
#         - delay: "00:10:00"
#         - service: homeassistant.turn_off
#           entity_id: switch.exterior_foyer
# #########################################
# - alias: "Security: doorbell rang"
#   id: "Security: doorbell rang"
#   description: "send telegram & if master sonos is playing announce the doorbell & play video stream on the main display"
#   trigger:
#     - platform: event
#       event_type: doorbird_front_door_doorbell
#   action:
#     - service: notify.telegram_jon
#       data_template:
#         title: "doorbell rang"
#         message: "doorbell rang"
#         data:
#           photo:
#             url: "{{ states.sensor.db_pic.state }}"
#     - choose: # if master sonos is playing, interrupt it for an announcement
#         - conditions: "{{ is_state('media_player.master', 'playing') }}"
#           sequence:
#             - service: script.sonos_say
#               data:
#                 sonos_entity: media_player.master
#                 volume: 0.5
#                 message: "doorbell rang!"
#                 delay: "00:00:03"
#     - service: media_player.play_media
#       data_template:
#         entity_id: media_player.main_display
#         media_content_id: "https://ha.gilmore.cloud:8123{{ states.camera.front_door_live.attributes.entity_picture }}"
#         media_content_type: image/jpg
#     - delay: "00:00:30"
#     - service: media_player.turn_off
#       data:
#         entity_id: media_player.main_display
#########################################
- alias: "Automatic Lighting: exterior person & dark out - toggle exterior lights"
  id: "Automatic Lighting: exterior person & dark out - toggle exterior lights"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.exterior_person
      id: pir-on
      to: "on"
    - platform: state
      entity_id: binary_sensor.exterior_person
      id: pir-off
      to: "off"
      for:
        minutes: 20
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
    - "{{ is_state('input_boolean.exterior_lights_block', 'off') }}"
  action:
    - choose:
        - conditions: # if exterior person detected, turn on all exterior lights
            - condition: trigger
              id: pir-on
          sequence:
            - service: scene.turn_on
              entity_id: scene.exterior_lights_on
        - conditions: # if its after 11pm, turn em all off, else turn exterior_except_sunset lights off
            - condition: trigger
              id: pir-off
          sequence:
            - choose:
                - conditions:
                    - condition: time
                      after: "23:00:00"
                      before: "07:00:00"
                  sequence:
                    - service: scene.turn_on
                      entity_id: scene.exterior_lights_off
              default:
                - service: scene.turn_on
                  entity_id: scene.exterior_except_sunset_off
#########################################
- alias: "Automatic Lighting: deck lights on when deck door opens"
  id: "Automatic Lighting: deck lights on when deck door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_sunroom_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_deck_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: switch.deck_lights
#########################################
- alias: "Automatic Lighting: patio lights on when patio door opens"
  id: "Automatic Lighting: patio lights on when patio door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_lounge_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_patio_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: light.patio_cans
#########################################
- alias: "Automatic Lighting: workshop lights on when workshop door opens"
  id: "Automatic Lighting: workshop lights on when workshop door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_workshop_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_workshop_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: switch.workshop_exterior
#########################################
- alias: "Automatic Lighting: grilldeck lights on when grilldeck door opens"
  id: "Automatic Lighting: grilldeck lights on when grilldeck door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_mudroom_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_deck_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id:
        - switch.grill_deck_light
        - switch.deck_posts
#########################################
- alias: "Wake Mode: done sleeping & HVAC fan off & recirculation pump on"
  id: "Wake Mode: done sleeping & HVAC fan off & recirculation pump on"
  description: "also checks if date is between Oct-May & turn on some lights"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      from: "on"
      to: "off"
  action:
    # - service: climate.set_fan_mode
    #   data:
    #     entity_id:
    #       - climate.basement_thermostat
    #       - climate.main_thermostat
    #       - climate.upstairs_thermostat
    #     fan_mode: "auto"
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
    # - choose:
    #     conditions:
    #       - condition: state
    #         entity_id: binary_sensor.light_inside
    #         state: "off"
    #       - condition: or
    #         conditions:
    #           - condition: template
    #             value_template: '{{ now().strftime("%m")|int > 10 }}'
    #           - condition: template
    #             value_template: '{{ now().strftime("%m")|int < 4 }}'
    #     sequence:
    #       - service: homeassistant.turn_on
    #         entity_id: switch.sunroom_sunroom_lamp, switch.great_room_lamp
# ########################################
# - alias: "Day Mode: turn off wake mode morning lamps"
#   id: "Day Mode: turn off wake mode morning lamps"
#   description: "only trigger between 6am and 10am"
#   trigger:
#     - platform: sun
#       event: sunrise
#       offset: "+01:00:00"
#   condition:
#     - condition: time
#       after: "6:00:00"
#       before: "10:00:00"
#   action:
#     - service: homeassistant.turn_off
#       entity_id: switch.sunroom_sunroom_lamp, switch.great_room_lamp
# ########################################
# - alias: "Automatic Lighting: motion light template - scenes"
#   id: "Automatic Lighting: motion light template - scenes"
#   description: "Template to turn off basement & kitchen & deck"
#   trigger:
#     # - platform: state
#     #   entity_id: sensor.elkm1_kitchen_pir
#     #   from: "Violated"
#     #   to: "Normal"
#     #   for:
#     #     minutes: 15
#     - platform: state
#       entity_id: binary_sensor.basement_motions
#       to: "off"
#       for:
#         minutes: 45
#     - platform: state
#       entity_id: sensor.deck_person
#       to: "0"
#       for:
#         minutes: 15
#   # condition:
#   #   - condition: state
#   #     entity_id: input_boolean.block_all_motion_lights
#   #     state: "off"
#   #   - condition: state
#   #     entity_id: binary_sensor.light_inside
#   #     state: "off"
#   action:
#     - service: scene.turn_on
#       data_template:
#         entity_id: >
#           {% set trigger_entity = trigger.entity_id %}
#           {% if trigger_entity == 'sensor.elkm1_kitchen_pir' %}
#             scene.equipment_room_enclosure_device_001_ph_kitchen_off
#           {% elif trigger_entity == 'binary_sensor.basement_motions' %}
#             scene.equipment_room_enclosure_device_001_ph_basement_off
#           {% endif %}
########################################
# TODO: check into this...
- alias: "Automatic Lighting: enable motion light boolean 2hours before sunset & disable 2hour after sunrise"
  id: "Automatic Lighting: enable motion light boolean 2hours before sunset & disable 2hour after sunrise"
  trigger:
    - platform: sun
      event: sunset
      offset: "-02:00:00"
    - platform: sun
      event: sunrise
      offset: "+02:00:00"
  action:
    - service_template: >
        {% if now().strftime("%H") | int > 12 %}homeassistant.turn_on
        {% else %}homeassistant.turn_on{% endif %}
      entity_id: input_boolean.motion_lights
########################################
- alias: "Automatic Lighting: turn off lights between 11pm and 4am if alarm hasnt been set and no motion detected for 20 min on all motions"
  id: "Automatic Lighting: turn off lights between 11pm and 4am if alarm hasnt been set and no motion detected for 20 min on all motions"
  trigger:
    - platform: state
      entity_id: binary_sensor.all_motions
      to: "off"
      for:
        minutes: 20
    - platform: time
      at: "23:30:00"
  condition:
    - condition: time
      after: "23:00:00"
      before: "04:00:00"
    - condition: state
      entity_id: binary_sensor.all_motions
      state: "off"
      for:
        minutes: 20
  action:
    # - service: scene.turn_on
    #   entity_id: scene.equipment_room_enclosure_device_001_ph_main_lower_ext_off
    - service: homeassistant.turn_off
      entity_id: group.all_lights
# ########################################
# - alias: "Automatic Lighting: backyard party lights"
#   id: "Automatic Lighting: backyard party lights"
#   trigger:
#     - platform: state
#       entity_id: sensor.elkm1_patio_door
#       to: "Violated"
#   condition:
#     - condition: state
#       entity_id: input_boolean.party
#       state: "on"
#   action:
#     - service: scene.turn_on
#       entity_id:
#         - scene.basement_keypad_theater
#         - scene.basement_keypad_bar
#########################################
- alias: "Utility: generic time based triggers"
  id: "Utility: generic time based triggers"
  trigger:
    - platform: time
      at: "12:00:00"
    - platform: time
      at: "8:00:01"
    - platform: time
      at: "5:00:00"
      id: 5am
    - platform: time
      at: "22:00:00"
      id: 10pm
    - platform: time
      at: "23:00:00"
      id: 11pm
  action:
    - choose: # only at 5am
        - conditions:
            - condition: trigger
              id: 5am
          sequence:
            - service: cover.open_cover
              entity_id: cover.library_shade
        - conditions: # only at 10pm
            - condition: trigger
              id: 10pm
          sequence:
            - service: homeassistant.turn_off
              entity_id: input_boolean.exterior_cans_auto_blocker
        - conditions: # only at 11pm
            - condition: trigger
              id: 11pm
          sequence:
            - service: scene.turn_on
              entity_id: scene.exterior_lights_off
      default: # at noon and 8am
        - service: homeassistant.turn_off
          entity_id:
            - input_boolean.sunset_run_once
            - input_boolean.driveway_sentry
#########################################
- alias: "Night Mode: start sleeping & set HVAC fans on & all lights off if no guests (only exterior & lower & & main if guests) & and main tv off & recirc pump off & enable driveway notify"
  id: "Night Mode: start sleeping & set HVAC fans on & all lights off if no guests (only exterior & lower & & main if guests) & and main tv off & recirc pump off & enable driveway notify"
  description: "also check garage doors and locks - notify if they are open or unlocked"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleep_status
      to: "on"
  action:
    - service: homeassistant.turn_off
      entity_id: group.all_lights
    - service: homeassistant.turn_off
      entity_id: input_boolean.exterior_cans_auto_blocker
    # - service: scene.turn_on
    #   data_template:
    #     entity_id: >
    #       {% if is_state('input_boolean.guests', 'on') %}
    #         scene.equipment_room_enclosure_device_001_ph_main_lower_ext_off
    #       {% else %}
    #         scene.equipment_room_enclosure_device_001_ph_all_but_master
    #       {% endif %}
    # - service: climate.set_fan_mode
    #   data:
    #     entity_id:
    #       - climate.basement_thermostat
    #       - climate.main_thermostat
    #       - climate.upstairs_thermostat
    #     fan_mode: "on"
    # - service: webostv.command
    #   data:
    #     entity_id: media_player.living_room_tv
    #     command: "system/turnOff"
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
    - service: input_boolean.turn_on
      entity_id:
        - input_boolean.frigate_deck_notifier
        - input_boolean.frigate_driveway_notifier
        - input_boolean.frigate_frontyard_notifier
        - input_boolean.frigate_grilldeck_notifier
        - input_boolean.frigate_patio_notifier
        - input_boolean.frigate_workshop_notifier
    - choose: # check the garage doors & notify
        conditions:
          condition: or
          conditions:
            - condition: state
              entity_id: sensor.elkm1_double_garage
              state: "Violated"
            - condition: state
              entity_id: sensor.elkm1_single_garage
              state: "Violated"
        sequence:
          - service: notify.telegram_jon
            data_template:
              title: "Garage Door is Open!"
              message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}!"
    # - choose: # check the locks & notify
    #     conditions:
    #       condition: or
    #       conditions:
    #         - condition: state
    #           entity_id: lock.front_door_lock
    #           state: "unlocked"
    #         - condition: state
    #           entity_id: lock.garage_door_lock
    #           state: "unlocked"
    #     sequence:
    #       - service: notify.telegram_jon
    #         data_template:
    #           title: "{{ states.sensor.doors_unlocked_number.state }} door(s) UNLOCKED!"
    #           message: "Locking {{ states.sensor.doors_unlocked.state }}"
    #       - service: script.lock_doors
#########################################
- alias: "Away Mode: turn the HVAC fans on & recirculation pump & tvs off"
  id: "Away Mode: turn the HVAC fans on & recirculation pump & tvs off"
  description: "also if its still bright inside, turn off all lights"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "off"
  action:
    # - service: climate.set_fan_mode
    #   data:
    #     entity_id:
    #       - climate.basement_thermostat
    #       - climate.main_thermostat
    #       - climate.upstairs_thermostat
    #     fan_mode: "on"
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
    # - service: script.tvs_off
    - choose: # if its light inside, turn off all lights
        - conditions: "{{ is_state('binary_sensor.light_inside', 'on') }}"
          sequence:
            - service: homeassistant.turn_off
              entity_id: group.all_lights
            # - service: scene.turn_on
            #   entity_id: scene.equipment_room_enclosure_device_001_ph_all_off
#########################################
- alias: "Home Mode: return home & turn the HVAC fans off & the recirculation pump on & stop daisy cam timer"
  id: "Home Mode: return home & turn the HVAC fans off & the recirculation pump on & stop daisy cam timer"
  trigger:
    - platform: state
      entity_id: binary_sensor.alarm_occupancy_status
      to: "on"
  action:
    # - service: climate.set_fan_mode
    #   data:
    #     entity_id:
    #       - climate.basement_thermostat
    #       - climate.main_thermostat
    #       - climate.upstairs_thermostat
    #     fan_mode: "auto"
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
########################################
- alias: "Night Mode: turn on sunset lights at dark or sunset"
  id: "Night Mode: turn on sunset lights at dark or sunset"
  trigger:
    - platform: state
      entity_id: binary_sensor.dark_out
      to: "on"
      for:
        minutes: 10
    - platform: sun
      event: sunset
  condition:
    - condition: state
      entity_id: input_boolean.sunset_run_once
      state: "off"
    - condition: time
      after: "15:30:00"
  action:
    - service: scene.turn_on
      entity_id: scene.sunset_on
    - service: homeassistant.turn_on
      entity_id:
        - input_boolean.sunset_run_once
        - input_boolean.exterior_cans_auto_blocker
    - service: cover.close_cover
      entity_id: cover.library_shade
# ########################################
# - alias: "Night Mode: turn on sunset2 lights at ten min after sunset"
#   id: "Night Mode: turn on sunset2 lights at ten min after sunset"
#   trigger:
#     - platform: sun
#       event: sunset
#       offset: "00:10:00"
#   action:
#     - service: scene.turn_on
#       entity_id: scene.equipment_room_enclosure_device_001_ph_sunset2
# ########################################
# - alias: "Fans: turn on master fan at night (if AC is on)"
#   id: "Fans: turn on master fan at night (if AC is on)"
#   trigger:
#     - platform: time
#       at: "20:00:00"
#   condition:
#     - condition: state
#       entity_id: climate.main_thermostat
#       state: cool
#     - condition: state
#       entity_id: binary_sensor.vacation_status
#       state: "off"
#   action:
#     - service: light.turn_on
#       data:
#         entity_id: light.master_bedroom_master_fan
#         brightness_pct: 50
# ########################################
# - alias: "Fans: turn off master fan in the morning"
#   id: "Fans: turn off master fan in the morning"
#   trigger:
#     - platform: time
#       at: "09:00:00"
#   action:
#     - service: light.turn_off
#       entity_id: light.master_bedroom_master_fan
# #########################################
# - alias: "Away Mode: check the front door lock when leaving"
#   id: "Away Mode: check the front door lock when leaving"
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.vacation_status
#       to: "on"
#     - platform: state
#       entity_id: sensor.armed_status
#       to: "armed_away"
#   condition:
#     - condition: state
#       entity_id: lock.front_door_lock
#       state: "unlocked"
#   action:
#     - service: notify.telegram_jon
#       data:
#         title: "Front Door is UNLOCKED!"
#         message: "Locking the front door"
#     - service: lock.lock
#       entity_id: lock.front_door_lock
#########################################
- alias: "HVAC: winter indoor humidity check & see if its below the high threshold"
  id: "HVAC: winter indoor humidity check & see if its below the high threshold"
  trigger:
    - platform: time
      at: "10:00:00"
  condition:
    - condition: template
      value_template: "{{ ( states.sensor.house_humidity.state  ) > ( states.sensor.target_humidity_max_winter.state ) }}"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Humidity Warning!"
        message: "Humidity in the house is too high: {{ states.sensor.house_humidity.state }}"
#########################################
- alias: "HVAC: winter indoor humidity check & see if its above the low threshold"
  id: "HVAC: winter indoor humidity check & see if its above the low threshold"
  trigger:
    - platform: time
      at: "10:01:00"
  condition:
    - condition: template
      value_template: "{{ ( states.sensor.house_humidity.state  ) < ( states.sensor.target_humidity_min_winter.state ) }}"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Humidity Warning!"
        message: "Humidity in the house is too low: {{ states.sensor.house_humidity.state }}"
#########################################
- alias: "Moisture: if there is a water leak & notify & close the water valve & turn off recirculation pump"
  id: "Moisture: if there is a water leak & notify & close the water valve & turn off recirculation pump"
  trigger:
    - platform: state
      entity_id: binary_sensor.moisture_sensors
      to: "on"
  action:
    - service: homeassistant.turn_off
      data:
        entity_id:
          - switch.equipment_room_recirculation_pump
          # - switch.water_main_shut_off
    - service: notify.telegram_jon
      data:
        title: "Water Leak!"
        message: "HomeAssistant detected a water leak"
# #########################################
# - alias: "Alarm: fire active & unlock locks & send videos & lights set to 25% & hvac off & repeat notifications"
#   id: "Alarm: fire active & unlock locks & send videos & lights set to 25% & hvac off & repeat notifications"
#   trigger:
#     - platform: state
#       entity_id: sensor.alarm_state
#       to: "fire_alarm"
#   action:
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.alarm_notifier
#     - service: scene.turn_on
#       entity_id: scene.equipment_room_enclosure_device_001_ph_fire
#     - service: lock.unlock
#       data:
#         entity_id:
#           - lock.garage_door_lock
#           - lock.front_door_lock
#     - service: script.alarm
#     - service: notify.mobile_app_lauras_iphone
#       data:
#         title: "Fire alarm active"
#         message: "check the alarm, fire detected"
#########################################
- alias: "Alarm: burglar active & lights on & send videos & repeat notifications"
  id: "Alarm: burglar active & lights on & send videos & repeat notifications"
  trigger:
    - platform: state
      entity_id: sensor.alarm_state
      to: "burglar_alarm"
  action:
    - service: scene.turn_on
      entity_id: scene.equipment_room_enclosure_device_001_ph_burglar
    - service: script.alarm
#########################################
- alias: "Alarm: turn off alarm notifications because of user interaction"
  id: "Alarm: turn off alarm notifications because of user interaction"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/turnoffnotification"
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Disabling notifications for {{ trigger }}"
        show_alert: true
    - service: input_boolean.turn_off
      entity_id: input_boolean.alarm_notifier
#########################################
- alias: "Security: Elk Alarm trouble notification"
  id: "Security: Elk Alarm trouble notification"
  trigger:
    - platform: state
      entity_id: sensor.alarm_trouble
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.alarm_trouble', '') }}"
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
# #########################################
# - alias: "Work: victorops notification - notify"
#   id: "Work: victorops notification - notify"
#   description: "if its not daytime and Jon is home, also turn on his lamp"
#   trigger:
#     - platform: template
#       value_template: "{{ 'com.victorops.androidclient' in states.sensor.pixel_5_last_notification.attributes['package'] }}"
#   action:
#     - service: notify.telegram_jon
#       data:
#         message: "ALERT! Work page: {{ states.sensor.pixel_5_last_notification.attributes['android.text'] }}"
#     - choose:
#         - conditions: "{{ not is_state('sensor.period_of_day', 'day') and is_state('person.jon', 'home') }}"
#           sequence:
#             - service: lifx.set_state
#               data:
#                 entity_id: light.jons_lamp_lifx
#                 power: true
#########################################
- alias: "Utility: general notifications"
  id: "Utility: general notifications"
  trigger:
    - platform: state
      entity_id:
        - sensor.public_ip
        - binary_sensor.rain_sensor
        - input_boolean.frigate_driveway_notifier
        - input_boolean.frigate_kitchen_notifier
        - input_boolean.frigate_deckstairs_notifier
        - input_boolean.frigate_deck_notifier
    - platform: template
      value_template: "{{ not (is_state('sensor.alarm_state', 'no_alarm_active') or is_state('sensor.alarm_state', 'entrance_delay_active')) }}"
    # - platform: state
    #   entity_id:
    #     - binary_sensor.office_multi_tamper
    #     - binary_sensor.kitchen_fridge_door_tamper
    #     - binary_sensor.home_assistant_versions_update_available
    #   to: "on"
    # - platform: numeric_state
    #   entity_id: sensor.computer_multi_temperature_measurement
    #   above: 105
    #   for:
    #     minutes: 5
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_fridge_temperature
    #     - sensor.kitchen_fridge_temperature
    #   above: 46
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_fridge_temperature
    #     - sensor.kitchen_fridge_temperature
    #   below: 30
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_freezer_temperature
    #     - sensor.kitchen_freezer_temperature
    #   above: 5
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_freezer_temperature
    #     - sensor.kitchen_freezer_temperature
    #   below: -8
    #   for:
    #     minutes: 20
    - platform: state
      entity_id: sensor.elkm1_elkm1
      to: "Disconnected"
    - platform: numeric_state
      entity_id:
        - sensor.elkm1_workshop_keypad
        # - sensor.master_entry_temperature
      above: 84
      for:
        minutes: 15
    - platform: numeric_state
      entity_id:
        - sensor.elkm1_workshop_keypad
        # - sensor.master_entry_temperature
      below: 55
      for:
        minutes: 15
    # - platform: state
    #   entity_id:
    #     - binary_sensor.washer_wash_completed
    #     - binary_sensor.dryer_dry_completed
    #   from: "off"
    #   to: "on"
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
# #########################################
# - alias: "Utility: UPS notifications"
#   id: "Utility: UPS notifications"
#   trigger:
#     - platform: event
#       event_type: nut.ups_event
#   action:
#     - service: notify.telegram_jon
#       data_template:
#         message: "{{ trigger.event.data.notify_msg }}"
#########################################
- alias: "Notification: important date (birthday & anniversary)"
  id: "Notification: important date (birthday & anniversary)"
  trigger:
    - platform: time
      at: "07:00:00"
  action:
    - service: notify.telegram_jon
      data_template:
        title: "Important date closing in!"
        message: >
          {% for state in states if (('birthday' in state.entity_id or 'anniversary' in state.entity_id) and state.state | int == 14) %}
          {{state.name}}
          {% endfor %}
# #########################################
# - alias: "Utility: create all groups"
#   id: "Utility: create all groups"
#   trigger:
#     - platform: homeassistant
#       event: start
#   action:
#     - service: script.group_set
#       data_template:
#         object_id: all_locks
#         name: All Locks
#         types: "lock"
# #########################################
# - alias: "Presence: office speakers on/off with presence"
#   id: "Presence: office speakers on/off with presence"
#   initial_state: false
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.office_occupancy
#       to: "on"
#     - platform: state
#       entity_id: binary_sensor.office_occupancy
#       to: "off"
#       for:
#         minutes: 21
#   action:
#     - service_template: >
#         {% if trigger.to_state.state == 'on' %}homeassistant.turn_on
#         {% else %}homeassistant.turn_off{% endif %}
#       entity_id: switch.office_speakers
#########################################
- alias: "Work: wfh turn off recirculation pump"
  id: "Work: wfh turn off recirculation pump"
  trigger:
    - platform: time
      at: "09:00:00"
  condition:
    - condition: state
      entity_id: binary_sensor.workday_sensor
      state: "on"
  action:
    - service: homeassistant.turn_off
      entity_id: switch.equipment_room_recirculation_pump
#########################################
- alias: "Work: wfh turn on recirculation pump (only when somebody is home)"
  id: "Work: wfh turn on recirculation pump (only when somebody is home)"
  trigger:
    - platform: time
      at: "16:30:00"
  condition:
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "on"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.equipment_room_recirculation_pump
#########################################
- alias: "Notification: acknowledge garage open"
  id: "Notification: acknowledge garage open"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ack_garagesingle
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ack_garagedouble
  action:
    - choose:
        - conditions: "{{ trigger.event.data.command == '\/ack_garagesingle' }}"
          sequence:
            - service: homeassistant.turn_off
              entity_id: alert.garage_door_single
      default:
        - service: homeassistant.turn_off
          entity_id: alert.garage_door_double
# #########################################
# - alias: "iOS Actions: toggle garage - single"
#   id: "iOS Actions: toggle garage - single"
#   trigger:
#     - platform: event
#       event_type: ios.action_fired
#       event_data:
#         actionID: 532EF4B0-E0F8-490D-B4C4-C4006A3469E0
#         actionName: Single Garage
#         sourceDeviceID: lauras_iphone
#         sourceDeviceName: Lauras iPhone
#         sourceDevicePermanentID: !secret ios_id
#         triggerSource: widget
#   action:
#     - service: homeassistant.toggle
#       entity_id: cover.garage_momentary_single
# #########################################
# - alias: "iOS Actions: unlock front door"
#   id: "iOS Actions: unlock front door"
#   trigger:
#     - platform: event
#       event_type: ios.action_fired
#       event_data:
#         actionID: 07C1C12C-F623-49CA-942A-2299B7B2EA0F
#         actionName: Unlock Front
#         sourceDeviceID: lauras_iphone
#         sourceDeviceName: Lauras iPhone
#         sourceDevicePermanentID: !secret ios_id
#         triggerSource: widget
#   action:
#     - service: lock.unlock
#       entity_id: lock.front_door_lock
