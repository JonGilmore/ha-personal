---
#########################################
- alias: "Security: doorbell rang"
  id: "Security: doorbell rang"
  description: "send telegram message when the doorbell rings and announce it on the sonos"
  trigger:
    - type: connected
      platform: device
      device_id: 498618c4bb775b9d0a1963689f168ddb
      entity_id: binary_sensor.a8105_e_0_call_button
      domain: binary_sensor
  variables:
    filename: "/tmp/doorbell_latest.jpg"
  action:
    - parallel:
        - service: media_player.play_media
          target:
            entity_id: media_player.kitchen
          data:
            media_content_id: media-source://tts/google_translate?message=ding+dong+-+somebody+is+at+the+door
            media_content_type: provider
          metadata:
            title: ding dong - somebody is at the door
            thumbnail: https://brands.home-assistant.io/_/google_translate/logo.png
            media_class: app
            children_media_class:
            navigateIds:
              - {}
              - media_content_type: app
                media_content_id: media-source://tts
              - media_content_type: provider
                media_content_id: media-source://tts/google_translate?message=ding+dong+-+somebody+is+at+the+door
        - service: media_player.play_media
          target:
            entity_id: media_player.office
          data:
            media_content_id: media-source://tts/google_translate?message=ding+dong+-+somebody+is+at+the+door
            media_content_type: provider
          metadata:
            title: ding dong - somebody is at the door
            thumbnail: https://brands.home-assistant.io/_/google_translate/logo.png
            media_class: app
            children_media_class:
            navigateIds:
              - {}
              - media_content_type: app
                media_content_id: media-source://tts
              - media_content_type: provider
                media_content_id: media-source://tts/google_translate?message=ding+dong+-+somebody+is+at+the+door
    - service: camera.snapshot
      target:
        entity_id: camera.doorbell
      data:
        filename: "{{filename}}"
    - parallel:
        - service: notify.telegram_jon
          data_template:
            message: "Doorbell Rang!"
            data:
              photo:
                - file: "{{filename}}"
                  caption: "Doorbell Rang!"
        - service: notify.mobile_app_lauras_iphone
          data:
            message: "Doorbell Rang!"
            data:
              image: "{{filename}}"
#########################################
- alias: "Automatic Lighting: exterior person & dark out - toggle exterior lights"
  id: "Automatic Lighting: exterior person & dark out - toggle exterior lights"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.exterior_person
      id: pir-on
      to: "on"
    - platform: state
      entity_id: binary_sensor.exterior_person
      id: pir-off
      to: "off"
      for:
        minutes: 20
  condition:
    - "{{ is_state('input_boolean.exterior_lights_block', 'off') }}"
  action:
    - choose:
        - conditions: # if exterior person detected, turn on all exterior lights
            - condition: trigger
              id: pir-on
            - "{{ is_state('binary_sensor.dark_out', 'on') }}"
            # - condition: sun # after 30m before sunset
            #   after: sunset
            #   after_offset: "-00:30:00"
            # - condition: sun # before 30m after sunrise
            #   before: sunrise
            #   before_offset: "00:30:00"
            - condition: state # from sunset until sunrise
              entity_id: sun.sun
              state: "below_horizon"
          sequence:
            - service: button.press
              entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_exterior_on
        - conditions: # if its after 11pm, turn em all off, else turn exterior_except_sunset lights off
            - condition: trigger
              id: pir-off
          sequence:
            - choose:
                - conditions:
                    - condition: time
                      after: "23:00:00"
                      before: "10:00:00"
                  sequence:
                    - service: button.press
                      entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_exterior_off
              default:
                - service: button.press
                  entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_ext_except_sun_off
#########################################
- alias: "Automatic Lighting: deck lights on when deck door opens"
  id: "Automatic Lighting: deck lights on when deck door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_sunroom_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_deck_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: light.exterior_deck_lights
#########################################
- alias: "Automatic Lighting: patio lights on when patio door opens"
  id: "Automatic Lighting: patio lights on when patio door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_lounge_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_patio_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: light.exterior_patio_cans
#########################################
- alias: "Automatic Lighting: workshop lights on when workshop door opens"
  id: "Automatic Lighting: workshop lights on when workshop door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_workshop_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_workshop_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: homeassistant.turn_on
      entity_id: light.exterior_workshop_light
#########################################
- alias: "Automatic Lighting: grilldeck lights on when grilldeck door opens"
  id: "Automatic Lighting: grilldeck lights on when grilldeck door opens"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_mudroom_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.dark_out', 'on') }}"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: sensor.elkm1_deck_door
          to: "Violated"
      timeout: 30
      continue_on_timeout: false
    - service: button.press
      entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_grilldeck_on
#########################################
- alias: "Wake Mode: done sleeping in the morning"
  id: "Wake Mode: done sleeping in the morning"
  description: "turns the recirc pump on & checks if the date is between Oct-May & turn on some lights & turns Evelyns Rest Plus to green"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleeping
      from: "on"
      to: "off"
  condition:
    - condition: time
      after: "5:45:00"
      before: "9:30:00"
  action:
    - service: homeassistant.turn_on
      entity_id: switch.basement_equipment_room_recirculation_pump
    - choose: # if the power of the hatch is on, turn the light green!
        conditions:
          - condition: state
            entity_id: switch.evelyns_room_power_switch
            state: "on"
        sequence:
          - service: light.turn_on
            data:
              entity_id: light.evelyns_room_light
              rgb_color: [0, 255, 0]
              brightness_pct: 6
    - wait_for_trigger: # w/in 20m of disarming, if there is foyer motion, turn on the living room
        - platform: state
          entity_id: sensor.elkm1_foyer_pir
          to: "Violated"
      timeout: 1200
      continue_on_timeout: false
    - choose:
        conditions:
          - condition: state
            entity_id: binary_sensor.light_inside
            state: "off"
          - condition: or
            conditions:
              - condition: template
                value_template: '{{ now().strftime("%m")|int > 10 }}'
              - condition: template
                value_template: '{{ now().strftime("%m")|int < 4 }}'
        sequence:
          - service: homeassistant.turn_on
            entity_id: light.main_floor_great_room_cabinets
########################################
- alias: "Day Mode: turn off wake mode morning lamps"
  id: "Day Mode: turn off wake mode morning lamps"
  description: "only trigger between 6am and 10am"
  trigger:
    - platform: sun
      event: sunrise
      offset: "+01:00:00"
  condition:
    - condition: time
      after: "6:00:00"
      before: "10:00:00"
  action:
    - service: homeassistant.turn_off
      entity_id: light.main_floor_great_room_cabinets
########################################
- alias: "Automatic Lighting: turn off lights between 11pm and 4am if alarm hasnt been set and no motion detected for 20 min on all motions"
  id: "Automatic Lighting: turn off lights between 11pm and 4am if alarm hasnt been set and no motion detected for 20 min on all motions"
  trigger:
    - platform: state
      entity_id: binary_sensor.all_motions
      to: "off"
      for:
        minutes: 20
    - platform: time
      at: "23:30:00"
  condition:
    - condition: time
      after: "23:00:00"
      before: "04:00:00"
    - condition: state
      entity_id: binary_sensor.all_motions
      state: "off"
      for:
        minutes: 20
  action:
    - service: button.press
      entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_all_off
#########################################
- alias: "Utility: generic time based triggers"
  id: "Utility: generic time based triggers"
  trigger:
    - platform: time
      at: "5:00:00"
      id: 5am
    - platform: time
      at: "7:00:00"
      id: 7am
    - platform: time
      at: "8:00:00"
    - platform: time
      at: "09:00:00"
      id: 9am
    - platform: time
      at: "10:00:00"
      id: 10am
    - platform: time
      at: "12:00:00"
    - platform: time
      at: "16:30:00"
      id: 430pm
    - platform: time
      at: "23:00:00"
      id: 11pm
  action:
    - choose:
        - conditions: # 5am, open the library shade
            - condition: trigger
              id: 5am
          sequence:
            - service: cover.open_cover
              entity_id:
                - cover.main_floor_library_shade
                - cover.basement_office_shade
        - conditions: # 7am and if there is an event 7 days out OR today, send a message
            - condition: trigger
              id: 7am
            - "{{ states('sensor.events_today') != '0' or states('sensor.events_in_seven_days') != '0' }}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                title: "*Important Date Reminder!*"
                message: >-
                  {% for entity in  state_attr('sensor.events_in_seven_days', 'entity_id') + state_attr('sensor.events_today', 'entity_id') %}
                  {{ '_' + state_attr(entity, 'friendly_name') + '_ - ' + state_attr(entity, 'date').strftime('%Y-%m-%d') }}
                  {% endfor %}
                parse_mode: markdown
        - conditions: # 9am turn off the recirc pump (assuming its a workday)
            - condition: trigger
              id: 9am
            - condition: state
              entity_id: binary_sensor.workday_sensor
              state: "on"
          sequence:
            - service: homeassistant.turn_off
              entity_id: switch.basement_equipment_room_recirculation_pump
        - conditions: # 10am check the house humidity level
            - condition: trigger
              id: 10am
            - or:
                - "{{ states('sensor.house_humidity') > states('sensor.target_humidity_max') }}"
                - "{{ states('sensor.house_humidity') < states('sensor.target_humidity_min') }}"
          sequence:
            - service: telegram_bot.send_message
              data_template:
                title: "*Humidity Warning!*"
                message: "Humidity in the house is: {{ states('sensor.house_humidity') }}"
        - conditions: # 4:30pm and if anybody is home, turn on the recirc pump
            - condition: trigger
              id: 430pm
            - condition: state
              entity_id: binary_sensor.anybody_home
              state: "on"
          sequence:
            - service: homeassistant.turn_on
              entity_id: switch.basement_equipment_room_recirculation_pump
        - conditions: # 11pm turn off the exterior lights
            - condition: trigger
              id: 11pm
          sequence:
            - service: button.press
              entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_exterior_off
      default: # at noon and 8am, turn off the sunset run once and driveway sentry
        - service: homeassistant.turn_off
          entity_id:
            - input_boolean.sunset_run_once
            - input_boolean.driveway_sentry
#########################################
- alias: "Night Mode: bed has either laura or both - turn off main & lower level lights"
  id: "Night Mode: bed has either laura or both - turn off main & lower level lights"
  trigger:
    - platform: state
      entity_id: sensor.bed_occupancy
      id: both
      to: both
    - platform: state
      entity_id: sensor.bed_occupancy
      id: laura
      to: laura
  condition:
    - condition: time
      after: "18:30:00"
  action:
    - choose:
        - conditions: "{{ trigger.id == 'both' }}"
          sequence:
            - service: button.press
              entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_all_int_but_mbed_off
        - conditions: "{{ trigger.id == 'laura' }}"
          sequence:
            - service: button.press
              entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_chill_off
#########################################
- alias: "Night Mode: start sleeping & set HVAC fans on & all lights off if no guests (only exterior & lower & main if guests) & and main tv off & recirc pump off & enable driveway notify"
  id: "Night Mode: start sleeping & set HVAC fans on & all lights off if no guests (only exterior & lower & main if guests) & and main tv off & recirc pump off & enable driveway notify"
  description: "also check garage doors and locks - notify if they are open or unlocked"
  trigger:
    - platform: state
      entity_id: binary_sensor.sleeping
      to: "on"
  action:
    - service: button.press
      data_template:
        entity_id: >
          {% if is_state('input_boolean.guests', 'on') %}
            button.basement_equipment_room_phantom_kp_position_1_keypad_main_lower_ext_off
          {% else %}
            button.basement_equipment_room_phantom_kp_position_1_keypad_all_but_mainbed
          {% endif %}
    - service: script.tvs_off_except_mainbed
    - service: homeassistant.turn_off
      entity_id: switch.basement_equipment_room_recirculation_pump
    - service: input_boolean.turn_on
      entity_id:
        - input_boolean.frigate_deck_notifier
        - input_boolean.frigate_driveway_notifier
        - input_boolean.frigate_frontyard_notifier
        - input_boolean.frigate_grilldeck_notifier
        - input_boolean.frigate_patio_notifier
        - input_boolean.frigate_workshop_notifier
    - choose: # check the garage doors & notify
        conditions:
          condition: or
          conditions:
            - condition: state
              entity_id: sensor.elkm1_double_garage
              state: "Violated"
            - condition: state
              entity_id: sensor.elkm1_single_garage
              state: "Violated"
        sequence:
          - service: notify.telegram_jon
            data_template:
              title: "Garage Door is Open!"
              message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}!"
    - choose: # check the locks, notify & lock if unlocked
        - conditions: "{{ states('sensor.doors_unlocked_number') | int > 0 }}"
          sequence:
            - service: notify.telegram_jon
              data_template:
                title: "{{ states('sensor.doors_unlocked_number') }} door(s) UNLOCKED!"
                message: "Locking {{ states('sensor.doors_unlocked') }}"
            - service: script.lock_doors
#########################################
- alias: "Occupancy: leaving or arriving home"
  id: "Occupancy: leaving or arriving home"
  description: "check locks & lights & recirc pump"
  trigger:
    - platform: state
      entity_id: binary_sensor.occupied_alarm
      from: "on"
      to: "off"
      id: leaving
    - platform: state
      entity_id: binary_sensor.occupied_alarm
      from: "off"
      to: "on"
      id: arriving
  action:
    - choose:
        - conditions: "{{ trigger.id == 'leaving' }}"
          sequence: # leaving home
            - service: notify.telegram_jon
              data:
                message: "leaving, checking the locks, lights, recirc pump"
            - service: homeassistant.turn_off
              entity_id: switch.basement_equipment_room_recirculation_pump
            - service: script.tvs_off
            - service: button.press
              entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_interior_off
            - choose: # if the workshop is unlocked, notify & lock
                - conditions: "{{ is_state('lock.workshop_lock', 'unlocked') }}"
                  sequence:
                    - service: notify.telegram_jon
                      data:
                        title: "Workshop is UNLOCKED!"
                        message: "Locking the workshop"
                    - service: lock.lock
                      entity_id: lock.workshop_lock
            - choose: # if the grilldeck is unlocked, notify & lock
                - conditions: "{{ is_state('lock.mudroom_lock', 'unlocked') }}"
                  sequence:
                    - service: notify.telegram_jon
                      data:
                        title: "Grilldeck is UNLOCKED!"
                        message: "Locking the grilldeck"
                    - service: lock.lock
                      entity_id: lock.mudroom_lock
        - conditions: "{{ trigger.id == 'arriving' }}"
          sequence: # arriving home
            - service: homeassistant.turn_on
              entity_id: switch.basement_equipment_room_recirculation_pump
            - service: notify.telegram_jon
              data:
                message: "arriving, turning on the recirc pump"
########################################
- alias: "Night Mode: turn on sunset lights at dark or sunset"
  id: "Night Mode: turn on sunset lights at dark or sunset"
  trigger:
    - platform: state
      entity_id: binary_sensor.light_inside
      to: "off"
      for:
        minutes: 10
    - platform: sun
      event: sunset
  condition:
    - condition: state
      entity_id: input_boolean.sunset_run_once
      state: "off"
    - condition: time
      after: "15:30:00"
  action:
    - service: button.press
      entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_sunset1
    - service: homeassistant.turn_on
      entity_id: input_boolean.sunset_run_once
    - service: cover.close_cover
      entity_id: cover.main_floor_library_shade
# ########################################
# - alias: "Night Mode: turn on sunset2 lights at ten min after sunset"
#   id: "Night Mode: turn on sunset2 lights at ten min after sunset"
#   trigger:
#     - platform: sun
#       event: sunset
#       offset: "00:10:00"
#   action:
#     - service: scene.turn_on
#       entity_id: scene.equipment_room_enclosure_device_001_ph_sunset2
# ########################################
# - alias: "Fans: turn on master fan at night (if AC is on)"
#   id: "Fans: turn on master fan at night (if AC is on)"
#   trigger:
#     - platform: time
#       at: "20:00:00"
#   condition:
#     - condition: state
#       entity_id: climate.main_thermostat
#       state: cool
#     - condition: state
#       entity_id: binary_sensor.vacation
#       state: "off"
#   action:
#     - service: light.turn_on
#       data:
#         entity_id: light.master_bedroom_master_fan
#         brightness_pct: 50
# ########################################
# - alias: "Fans: turn off master fan in the morning"
#   id: "Fans: turn off master fan in the morning"
#   trigger:
#     - platform: time
#       at: "09:00:00"
#   action:
#     - service: light.turn_off
#       entity_id: light.master_bedroom_master_fan
#########################################
- alias: "Moisture: if there is a water leak & notify & close the water valve & turn off recirculation pump"
  id: "Moisture: if there is a water leak & notify & close the water valve & turn off recirculation pump"
  trigger:
    - platform: state
      entity_id: binary_sensor.moisture_sensors
      to: "on"
  action:
    - service: homeassistant.turn_off
      data:
        entity_id:
          - switch.basement_equipment_room_recirculation_pump
          - switch.water_main
    - service: notify.telegram_jon
      data:
        title: "Water Leak!"
        message: "HomeAssistant detected a water leak"
# #########################################
# - alias: "Alarm: fire active & unlock locks & send videos & lights set to 25% & hvac off & repeat notifications"
#   id: "Alarm: fire active & unlock locks & send videos & lights set to 25% & hvac off & repeat notifications"
#   trigger:
#     - platform: state
#       entity_id: sensor.alarm_state
#       to: "fire_alarm"
#   action:
#     - service: input_boolean.turn_on
#       entity_id: input_boolean.alarm_notifier
#     - service: scene.turn_on
#       entity_id: scene.equipment_room_enclosure_device_001_ph_fire
#     - service: lock.unlock
#       data:
#         entity_id:
#           - lock.garage_lock
#           - lock.workshop_lock
#     - service: script.alarm
#     - service: notify.mobile_app_lauras_iphone
#       data:
#         title: "Fire alarm active"
#         message: "check the alarm, fire detected"
#########################################
- alias: "Alarm: burglar active & lights on & send videos & repeat notifications"
  id: "Alarm: burglar active & lights on & send videos & repeat notifications"
  trigger:
    - platform: state
      entity_id: sensor.alarm_state
      to: "burglar_alarm"
  action:
    - service: button.press
      entity_id: button.basement_equipment_room_phantom_kp_position_1_keypad_burglar
    - service: script.alarm
#########################################
- alias: "Alarm: turn off alarm notifications because of user interaction"
  id: "Alarm: turn off alarm notifications because of user interaction"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        data: "/turnoffnotification"
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "Disabling notifications for {{ trigger.id }}"
        show_alert: true
    - service: input_boolean.turn_off
      entity_id: input_boolean.alarm_notifier
#########################################
- alias: "Security: Elk Alarm trouble notification"
  id: "Security: Elk Alarm trouble notification"
  trigger:
    - platform: state
      entity_id: sensor.alarm_trouble
  condition:
    - condition: template
      value_template: "{{ not is_state('sensor.alarm_trouble', '') }}"
  action:
    - service: notify.telegram_jon
      data_template:
        message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
#########################################
- alias: "Work: pagerduty notification - notify"
  id: "Work: pagerduty notification - notify"
  description: "if its not daytime and Jon is home turn on his lamp"
  trigger:
    - platform: event
      event_type: state_changed
      event_data:
        entity_id: sensor.pixel7_last_notification
  condition:
    - condition: state
      entity_id: sensor.pixel7_last_notification
      state: com.pagerduty.android
      attribute: package
  action:
    - service: notify.telegram_jon
      data_template:
        message: "ALERT: work page! {{ states(trigger.event.data.entity_id) }}"
    - choose:
        - conditions: "{{ not is_state('sensor.period_of_day', 'day') and is_state('person.jon', 'home') }}"
          sequence:
            - service: homeassistant.turn_on
              entity_id: light.jons_lamp
#########################################
- alias: "Utility: general notifications"
  id: "Utility: general notifications"
  trigger:
    - platform: state
      entity_id:
        - sensor.myip
        - input_boolean.frigate_deck_notifier
        - input_boolean.frigate_driveway_notifier
        - input_boolean.frigate_frontyard_notifier
        - input_boolean.frigate_grilldeck_notifier
        - input_boolean.frigate_patio_notifier
        - input_boolean.frigate_workshop_notifier
    - platform: template
      value_template: "{{ not (is_state('sensor.alarm_state', 'no_alarm_active') or is_state('sensor.alarm_state', 'entrance_delay_active')) }}"
    - platform: state
      entity_id:
        - binary_sensor.lounge_pir_tampering_product_cover_removed
        - binary_sensor.home_assistant_versions_update_available
        - update.adguard_home_update
        - update.cloudflared_update
        - update.double_take_update
        - update.esphome_update
        - update.exadel_compreface_update
        - update.frigate_nvr_proxy_update
        - update.home_assistant_core_update
        - update.home_assistant_supervisor_update
        - update.mariadb_update
        - update.mosquitto_broker_update
        - update.network_ups_tools_update
        - update.samba_share_update
        - update.terminal_ssh_update
        - update.wireguard_update
      to: "on"
    # - platform: numeric_state
    #   entity_id: sensor.computer_multi_temperature_measurement
    #   above: 105
    #   for:
    #     minutes: 5
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_fridge_temperature
    #     - sensor.kitchen_fridge_temperature
    #   above: 46
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_fridge_temperature
    #     - sensor.kitchen_fridge_temperature
    #   below: 30
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_freezer_temperature
    #     - sensor.kitchen_freezer_temperature
    #   above: 5
    #   for:
    #     minutes: 20
    # - platform: numeric_state
    #   entity_id:
    #     - sensor.bar_freezer_temperature
    #     - sensor.kitchen_freezer_temperature
    #   below: -8
    #   for:
    #     minutes: 20
    - platform: state
      entity_id: sensor.elkm1_elkm1
      to: "Disconnected"
    - platform: numeric_state
      entity_id:
        - sensor.elkm1_workshop_keypad
      above: 85
      for:
        minutes: 15
    - platform: numeric_state
      entity_id:
        - sensor.elkm1_workshop_keypad
      below: 55
      for:
        minutes: 15
    - platform: state
      entity_id: sensor.cyberpower_status_data
      to: "OB DISCHRG"
      id: nut_event
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: nut_event
          sequence:
            - service: notify.telegram_jon
              data_template:
                message: "Power outage detected by UPS: {{ (states('sensor.cyberpower_battery_runtime') | float / 60) | round(0) }} minutes of battery power remaining."
      default:
        - service: notify.telegram_jon
          data_template:
            message: "{{ trigger.to_state.attributes.friendly_name }} is {{ trigger.to_state.state }}."
# #########################################
# - alias: "Presence: office speakers on/off with presence"
#   id: "Presence: office speakers on/off with presence"
#   initial_state: false
#   trigger:
#     - platform: state
#       entity_id: binary_sensor.office_occupancy
#       to: "on"
#     - platform: state
#       entity_id: binary_sensor.office_occupancy
#       to: "off"
#       for:
#         minutes: 21
#   action:
#     - service_template: >
#         {% if trigger.to_state.state == 'on' %}homeassistant.turn_on
#         {% else %}homeassistant.turn_off{% endif %}
#       entity_id: switch.office_speakers
# #########################################
- alias: "Utility: Auto-restart NUT add-on"
  id: "Utility: Auto-restart NUT add-on"
  trigger:
    - platform: state
      entity_id:
        - sensor.cyberpower_status
      to: unavailable
      for:
        minutes: 1
  action:
    - service: hassio.addon_restart
      data:
        addon: a0d7b954_nut
# #########################################
- alias: "Utility: power outage"
  id: "Utility: power outage"
  trigger:
    - platform: state
      entity_id: sensor.cyberpower_ups
      to: three
      id: three
      for:
        seconds: 30
    - platform: state
      entity_id: sensor.cyberpower_ups
      to: five
      id: five
      for:
        seconds: 15
    - platform: state
      entity_id: sensor.cyberpower_ups
      to: ten
      id: ten
      for:
        seconds: 15
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: three
          sequence:
            - service: notify.telegram_jon
              data_template:
                message: "Cyberpower ups has {{ (state('sensor.cyberpower_battery_runtime') | float / 60) | round(0) }}min remaining, turning off HA."
            - service: shell_command.debian_shutdown
        - conditions:
            - condition: trigger
              id: five
          sequence:
            - service: notify.telegram_jon
              data_template:
                message: "Cyberpower ups has {{ (state('sensor.cyberpower_battery_runtime') | float / 60) | round(0) }}min remaining."
        - conditions:
            - condition: trigger
              id: ten
          sequence:
            - service: notify.telegram_jon
              data_template:
                message: "Cyberpower ups has {{ (state('sensor.cyberpower_battery_runtime') | float / 60) | round(0) }}min remaining."
#########################################
- alias: "Garage: acknowledge garage open"
  id: "Garage: acknowledge garage open"
  description: "depending on the telegram callback ignore the appropriate garage door alert"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ignore_garagesingle
    - platform: event
      event_type: telegram_callback
      event_data:
        command: /ignore_garagedouble
  action:
    - choose:
        - conditions: "{{ trigger.event.data.command == '\/ignore_garagesingle' }}"
          sequence:
            - service: homeassistant.turn_off
              entity_id: alert.garage_door_single
        - conditions: "{{ trigger.event.data.command == '\/ignore_garagedouble' }}"
          sequence:
            - service: homeassistant.turn_off
              entity_id: alert.garage_door_double
#########################################
- alias: "Garage: telegram door close"
  id: "Garage: telegram door close"
  description: "send a picture while answering the callback & close the door & disable the alert"
  trigger:
    - platform: event
      id: single
      event_type: telegram_callback
      event_data:
        data: "/closegarage_single"
      variables:
        door: cover.single_garage_door
        alert: alert.garage_door_single
    - platform: event
      id: double
      event_type: telegram_callback
      event_data:
        data: "/closegarage_double"
      variables:
        door: cover.double_garage_door
        alert: alert.garage_door_double
  action:
    - service: telegram_bot.answer_callback_query
      data_template:
        callback_query_id: "{{ trigger.event.data.id }}"
        message: "🚗 Closing the {{ trigger.id }} garage!"
        show_alert: false
    - service: cover.close_cover
      data_template:
        entity_id: "{{ door }}"
    - service: alert.turn_off
      data_template:
        entity_id: "{{ alert }}"
    - delay: 10
    - service: telegram_bot.send_photo
      data_template:
        url: "http://192.168.30.249:5005/api/garage/latest.jpg"
        caption: "🚗 Closing the {{ trigger.id }} garage!"
#########################################
- alias: "Test: webhook"
  id: "Test: webhook"
  trigger:
    - platform: webhook
      webhook_id: !secret pd_hook
  action:
    - service: system_log.write
      data_template:
        message: "LOGGING: {{ trigger.json }}"
        level: error
#########################################
- alias: "Automatic Lighting: motion light template"
  id: "Automatic Lighting: motion light template"
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.office_motions
        - binary_sensor.elkm1_main_bath_pir
        - binary_sensor.elkm1_lounge_pir
        - binary_sensor.elkm1_mudroom_pir
      id: pir-on
      to: "on"
    - platform: state
      entity_id:
        - binary_sensor.elkm1_lounge_pir
        - binary_sensor.office_motions
        - binary_sensor.elkm1_mudroom_pir
      id: pir-off
      to: "off"
      for:
        minutes: 10
    - platform: state
      entity_id:
        - binary_sensor.elkm1_main_bath_pir
      id: pir-off
      to: "off"
      for:
        minutes: 3
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
            - "{{ is_state('binary_sensor.light_inside', 'off') }}"
          sequence:
            - service: light.turn_on
              data_template:
                entity_id: >
                  {% if trigger.entity_id == 'binary_sensor.elkm1_main_bath_pir' %}
                    light.upstairs_main_bathroom_toekick
                  {% elif trigger.entity_id == 'binary_sensor.elkm1_lounge_pir' %}
                    light.basement_bar_cabinets
                  {% elif trigger.entity_id == 'binary_sensor.elkm1_mudroom_pir' %}
                    light.main_floor_mudroom_lamp
                  {% endif %}
                brightness_pct: "{{ states('sensor.circadian_brightness') }}"
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: homeassistant.turn_off
              data_template:
                entity_id: >
                  {% if trigger.entity_id == 'binary_sensor.elkm1_main_bath_pir' %}
                    light.upstairs_main_bathroom_toekick
                  {% elif trigger.entity_id == 'binary_sensor.elkm1_lounge_pir' %}
                    light.basement_bar_cabinets
                  {% elif trigger.entity_id == 'binary_sensor.elkm1_mudroom_pir' %}
                    light.main_floor_mudroom_lamp
                  {% endif %}
#########################################
- alias: "Automatic Lighting: motion light laundry"
  id: "Automatic Lighting: motion light laundry"
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.elkm1_laundry_pir
      id: pir-on
      to: "on"
    - platform: state
      entity_id:
        - binary_sensor.elkm1_laundry_pir
      id: pir-off
      to: "off"
      for:
        minutes: 4
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
            # - "{{ is_state('binary_sensor.light_inside', 'off') }}"
          sequence:
            - service: light.turn_on
              data_template:
                entity_id: light.upstairs_laundry_cabinets
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: homeassistant.turn_off
              data_template:
                entity_id: light.upstairs_laundry_cabinets
#########################################
- alias: "Automatic Lighting: motion light gym"
  id: "Automatic Lighting: motion light gym"
  description: "turn on the gym recessed lights when there is motion. bail out of the automation if the light is already on/off"
  variables:
    light: light.basement_gym_cans
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_gym_pir
      to: "on"
      id: pir-on
    - platform: state
      entity_id: binary_sensor.elkm1_gym_pir
      to: "off"
      id: pir-off
      for: "00:05:00"
  condition: "{{ (trigger.to_state.state == 'on' and is_state(light, 'off')) or (trigger.to_state.state == 'off' and is_state(light, 'on')) }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
          sequence:
            - service: light.turn_on
              data_template:
                entity_id: "{{light}}"
                brightness_pct: 2
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: homeassistant.turn_off
              target:
                entity_id: "{{light}}"
#########################################
- alias: "Automatic Lighting: motion light basement stairs"
  id: "Automatic Lighting: motion light basement stairs"
  description: "on basement stair motion, turn on the lights (at 30% of the circadian brightness)"
  variables:
    light: light.basement_stair_lights
    brightness_pct: 30
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_basmnt_stair_pir
      to: "on"
      id: pir-on
    - platform: state
      entity_id: binary_sensor.elkm1_basmnt_stair_pir
      to: "off"
      id: pir-off
      for: "00:05:00"
  condition: "{{ (trigger.to_state.state == 'on' and is_state(light, 'off')) or (trigger.to_state.state == 'off' and is_state(light, 'on')) }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
            - "{{ is_state('binary_sensor.light_inside', 'off') }}"
          sequence:
            - service: light.turn_on
              data_template:
                entity_id: "{{light}}"
                brightness_pct: "{{ states('sensor.circadian_brightness') | float * brightness_pct }}"
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: homeassistant.turn_off
              target:
                entity_id: "{{light}}"
#########################################
- alias: "Automatic Lighting: main bath lights"
  id: "Automatic Lighting: main bath lights"
  description: "if there is not motion in the main bath for 20 minutes, turn off the lights"
  variables:
    light: button.basement_equipment_room_phantom_kp_position_1_keypad_mainbath_off
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_main_bath_pir
      to: "off"
      for: "00:20:00"
  action:
    - service: button.press
      data_template:
        entity_id: "{{light}}"
#########################################
- alias: "Automatic Lighting: motion light back kitchen"
  id: "Automatic Lighting: motion light back kitchen"
  description: "turn on the back kitchen lights when there is motion. bail out of the automation if the light is already on/off"
  variables:
    light: light.main_floor_back_kitchen_cabinets
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_back_kitchen_pir
      to: "on"
      id: pir-on
    - platform: state
      entity_id: binary_sensor.elkm1_back_kitchen_pir
      to: "off"
      id: pir-off
      for: "00:05:00"
  condition: "{{ (trigger.to_state.state == 'on' and is_state(light, 'off')) or (trigger.to_state.state == 'off' and is_state(light, 'on')) }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
          sequence:
            - service: light.turn_on
              data_template:
                entity_id: "{{light}}"
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: homeassistant.turn_off
              target:
                entity_id: "{{light}}"
#########################################
- alias: "Automatic Lighting: motion light template - scenes"
  id: "Automatic Lighting: motion light template - scenes"
  mode: restart
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.elkm1_kitchen_pir
      id: pir-on
      to: "on"
    - platform: state
      entity_id:
        - binary_sensor.kitchen_area_motions
      id: pir-off
      to: "off"
      for:
        minutes: 12
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: pir-on
            - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
            - "{{ is_state('binary_sensor.light_inside', 'off') }}"
          sequence:
            - service: button.press
              data_template:
                entity_id: >
                  {% if trigger.entity_id == 'binary_sensor.elkm1_kitchen_pir' %}
                    button.basement_equipment_room_phantom_kp_position_1_keypad_kitchen_low_on
                  {% endif %}
        - conditions:
            - condition: trigger
              id: pir-off
          sequence:
            - service: button.press
              data_template:
                entity_id: >
                  {% if trigger.entity_id == 'binary_sensor.kitchen_area_motions' %}
                    button.basement_equipment_room_phantom_kp_position_1_keypad_kitchenhall_off
                  {% endif %}
#########################################
- alias: "Blinds: office"
  id: "Blinds: office"
  trigger:
    - platform: state
      entity_id: binary_sensor.elkm1_office_pir
      to: "on"
  condition:
    - "{{ is_state('binary_sensor.light_inside', 'off') }}"
    - condition: template # only notify once every hour at most
      value_template: "{{ (as_timestamp(now()) - as_timestamp(state_attr('automation.blinds_office', 'last_triggered')) | int(0)) > 21600 }}"
    - condition: sun
      after: sunset
      after_offset: "00:30:00"
  action:
    - service: cover.close_cover
      entity_id:
        - cover.basement_office_shade
        - cover.basement_office_west_shade
# #########################################
# - alias: "Automatic Lighting: office"
#   id: "Automatic Lighting: office"
#   mode: restart
#   variables:
#     # pir: binary_sensor.elkm1_office_pir
#     light: light.basement_office_cans
#     brightness: switch.adaptive_lighting_office
#   trigger:
#     - platform: state
#       entity_id: sensor.elkm1_office_pir
#       id: pir-on
#       to: "Violated"
#     - platform: state
#       entity_id: sensor.elkm1_office_pir
#       id: pir-off
#       to: "Normal"
#       for:
#         minutes: 10
#   action:
#     - choose:
#         - conditions:
#             - condition: trigger
#               id: pir-on
#             - "{{ is_state('input_boolean.block_interior_motion_lights', 'off') }}"
#             - "{{ is_state('binary_sensor.light_inside', 'off') }}"
#           sequence:
#             - service: light.turn_on
#               data_template:
#                 entity_id: "{{ light }}"
#                 brightness: "{{ state_attr(brightness, 'brightness_pct') }}"
#         - conditions:
#             - condition: trigger
#               id: pir-off
#           sequence:
#             - service: homeassistant.turn_off
#               data_template:
#                 entity_id: "{{ light }}"
#########################################
- alias: "Lutron: main bedroom pico"
  id: "Lutron: main bedroom pico"
  trigger:
    - platform: device
      device_id: 3d2b7230702c02d71c1f062b00e9fae7
      domain: lutron_caseta
      type: press
      subtype: button_1
    - platform: device
      device_id: 3d2b7230702c02d71c1f062b00e9fae7
      domain: lutron_caseta
      type: press
      subtype: button_2
    - platform: device
      device_id: 3d2b7230702c02d71c1f062b00e9fae7
      domain: lutron_caseta
      type: press
      subtype: button_3
    - platform: device
      device_id: 3d2b7230702c02d71c1f062b00e9fae7
      domain: lutron_caseta
      type: press
      subtype: button_4
  action:
    - service_template: >
        {% if trigger.event.data.leap_button_number in [1,3] %}homeassistant.turn_on
        {% else %}homeassistant.turn_off{% endif %}
      data_template:
        entity_id: >
          {% if trigger.event.data.leap_button_number in [1,2] %}light.lauras_lamp
          {% else %}light.jons_lamp{% endif %}
#########################################
- alias: "Lutron: main bedroom keypad"
  id: "Lutron: main bedroom keypad"
  trigger:
    - platform: device
      device_id: e9e7f4f32145e5ff86d0dafe818bc9b4
      domain: lutron_caseta
      type: press
      subtype: "Jon's"
      id: jons-on
    - platform: device
      device_id: e9e7f4f32145e5ff86d0dafe818bc9b4
      domain: lutron_caseta
      type: press
      subtype: "Laura's"
      id: lauras-on
    - platform: device
      device_id: e9e7f4f32145e5ff86d0dafe818bc9b4
      domain: lutron_caseta
      type: press
      subtype: "Off"
      id: lamps-off
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: jons-on
          sequence:
            - service: homeassistant.turn_on
              entity_id: light.jons_lamp
        - conditions:
            - condition: trigger
              id: lauras-on
          sequence:
            - service: homeassistant.turn_on
              entity_id: light.lauras_lamp
        - conditions:
            - condition: trigger
              id: lamps-off
          sequence:
            - service: homeassistant.turn_off
              entity_id:
                - light.jons_lamp
                - light.lauras_lamp
#########################################
- alias: "Lutron: office pico"
  id: "Lutron: office pico"
  trigger:
    - platform: event
      event_type: lutron_caseta_button_event
      id: fan-on
      event_data:
        serial: 44120560
        button_number: 8
        action: press
    - platform: event
      event_type: lutron_caseta_button_event
      id: fan-off
      event_data:
        serial: 44120560
        button_number: 9
        action: press
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: fan-on
          sequence:
            - service: fan.set_percentage
              target:
                entity_id: fan.office_fan
              data:
                percentage: 33
        - conditions:
            - condition: trigger
              id: fan-off
          sequence:
            - service: fan.turn_off
              entity_id: fan.office_fan
#########################################
# - alias: "Lutron: utility pico"
#   id: "Lutron: utility pico"
#   trigger:
#     - platform: event
#       event_type: lutron_caseta_button_event
#       id: fan-on
#       event_data:
#         serial: 29314072
#         button_number: 8
#         action: press
#     - platform: event
#       event_type: lutron_caseta_button_event
#       id: fan-off
#       event_data:
#         serial: 29314072
#         button_number: 11
#         action: press
#   action:
#     - choose:
#         - conditions:
#             - condition: trigger
#               id: fan-on
#           sequence:
#             - service: homeassistant.turn_on
#               entity_id: light.main_floor_sunroom_cans
#         - conditions:
#             - condition: trigger
#               id: fan-off
#           sequence:
#             - service: homeassistant.turn_off
#               entity_id: light.main_floor_sunroom_cans
#########################################
- alias: "LPR: driveway plate recognition"
  id: "LPR: driveway plate recognition"
  description: "when the driveway LPR sensor changes, send a photo and the state of the sensor"
  trigger:
    - platform: state
      entity_id: sensor.driveway_plate
  variables:
    filename: "/tmp/driveway_lpr.jpg"
  action:
    - service: camera.snapshot
      target:
        entity_id: camera.driveway_image
      data:
        filename: "{{filename}}"
    - service: notify.telegram_jon
      data_template:
        message: "Driveway LPR!"
        data:
          photo:
            - file: "{{filename}}"
              caption: "New plate recognized: {{ states('sensor.driveway_plate') }}"
