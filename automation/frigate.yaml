---
#########################################
- alias: "Frigate: disable notifications because of user interaction"
  id: "Frigate: disable notifications because of user interaction"
  description: "options to mute notifications for 60m or the rest of the day"
  mode: parallel
  max: 10
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedriveway60"
      variables:
        location: driveway
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedrivewayday"
      variables:
        location: driveway
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeck60"
      variables:
        location: grilldeck
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeckday"
      variables:
        location: grilldeck
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeck60"
      variables:
        location: deck
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeckday"
      variables:
        location: deck
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyard60"
      variables:
        location: frontyard
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyardday"
      variables:
        location: frontyard
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatepatio60"
      variables:
        location: patio
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatepatioday"
      variables:
        location: patio
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigateworkshop60"
      variables:
        location: workshop
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigateworkshopday"
      variables:
        location: workshop
        time: day
  action:
    - choose: # mute the appropriate frigate boolean, and optionally unmute 60m later depending on whats been selected
        - conditions: "{{ trigger.event.data.command == '\/mutefrigate' ~ location ~ time }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger.id }} for {{ time }}"
                show_alert: true
            - service: input_boolean.turn_off
              data_template:
                entity_id: input_boolean.frigate_{{location}}_notifier
            - choose:
                - conditions: "{{time == '60'}}"
                  sequence:
                    - delay: "00:60:00"
                    - service: input_boolean.turn_on
                      data_template:
                        entity_id: input_boolean.frigate_{{location}}_notifier
              default: []
      default:
        - service: system_log.write
          data_template:
            message: "Damnit, defaulting: {{ trigger.event.data.command == '\/mutefrigate' ~ location ~ time }} && {{ mutefrigate ~ location ~ time }} && variable values: {{ location ~ time }} && {{trigger}}"
            level: error
#########################################
- alias: "LPR: driveway car"
  id: "LPR: driveway car"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: driveway
      value_template: '{{ value_json["after"]["camera"] }}'
  condition: # only run if a car has entered the far driveway zone
    - "{{ trigger.payload_json['after']['label'] == 'car' }}"
    - "{{ 'driveway_far' in trigger.payload_json['after']['entered_zones'] }}"
    - "{{ states('sensor.platerecognizer_api_calls_remaining') | int > 0 }}"
  action:
    - service: image_processing.scan
      target:
        entity_id: image_processing.platerecognizer_driveway
#########################################
- alias: "Frigate: driveway video notification"
  id: "Frigate: driveway video notification"
  description: "if Jons away or were asleep - send a video of the driveway"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: driveway
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_driveway_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    # - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
      default: []
    - delay: 90
#########################################
- alias: "Frigate: frontyard video notification"
  id: "Frigate: frontyard video notification"
  description: "if Jons away or were asleep - send a video of the frontyard"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: frontyard
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_frontyard_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
      default: []
    - delay: 90
#########################################
- alias: "Frigate: grilldeck video notification"
  id: "Frigate: grilldeck video notification"
  description: "if Jons away or were asleep - send a video of the grilldeck"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: grilldeck
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_grilldeck_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{ label }} detected. Mute?"
      default: []
    - delay: 45
#########################################
- alias: "Frigate: deck video notification"
  id: "Frigate: deck video notification"
  description: "if Jons away or were asleep - send a video of the deck"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: deck
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_deck_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
      default: []
    - delay: 45
#########################################
- alias: "Frigate: patio video notification"
  id: "Frigate: patio video notification"
  description: "if Jons away or were asleep - send a video of the patio"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: patio
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_patio_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
      default: []
    - delay: 45
#########################################
- alias: "Frigate: workshop video notification"
  id: "Frigate: workshop video notification"
  description: "if Jons away or were asleep - send a video of the workshop"
  trigger:
    - platform: mqtt
      topic: frigate/events
      id: frigate-event
      payload: workshop
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
  condition:
    - "{{ is_state('input_boolean.frigate_workshop_notifier', 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ states('person.jon') != 'home' }}"
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: frigate-event
          sequence:
            # Send the initial notification with snapshot and info.
            - service: telegram_bot.send_photo
              data:
                url: https://ha.gilmore.cloud/api/frigate/notifications/{{trigger.payload_json['after']['id']}}/snapshot.jpg
            - repeat:
                until: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                sequence:
                  - wait_for_trigger:
                      - platform: mqtt
                        topic: frigate/events
                        payload: "{{ id }}"
                        value_template: "{{ value_json['after']['id'] }}"
                    continue_on_timeout: false
                    timeout: "00:02:00"
                  - condition: template
                    value_template: "{{ wait.trigger.payload_json['type'] == 'end' }}"
                  # download & trim the clip in case its really long, save to a static file
                  - service: shell_command.download_file
                    data_template:
                      url: "http://192.168.30.249:5005/api/events/{{ id }}/clip.mp4"
                      download: "/share/{{camera}}.mp4"
                  - service: shell_command.trim_video
                    data_template:
                      duration: "00:00:10"
                      clip: "/share/{{camera}}.mp4"
                      path: "/share/trimmed-{{camera}}.mp4"
                  - service: telegram_bot.send_video
                    data_template:
                      file: "/share/trimmed-{{camera}}.mp4"
                      inline_keyboard:
                        - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
                      caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
      default: []
    - delay: 45
#########################################
- alias: "Frigate: mudroom detection based on presence"
  id: "Frigate: mudroom detection based on presence"
  description: "enable/disable detection in the mudroom based on presence"
  trigger:
    - platform: state
      entity_id: binary_sensor.anybody_home
  action:
    - service_template: >
        {% if trigger.to_state.state == 'off' %}homeassistant.turn_on
        {% else %}homeassistant.turn_off{% endif %}
      entity_id: switch.mudroom_detect
