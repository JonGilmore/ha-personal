---
#########################################
- alias: "Frigate: disable notifications because of user interaction"
  id: "Frigate: disable notifications because of user interaction"
  description: "options to mute notifications for 60m or the rest of the day"
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedriveway60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedrivewayday"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeck60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeckday"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeck60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeckday"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyard60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyardday"
  action:
    - choose:
        - conditions: "{{ trigger.event.data.command == '\/mutefrigatedriveway60' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for 60min"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_driveway_notifier
            - delay: "00:60:00"
            - service: input_boolean.turn_on
              entity_id: input_boolean.frigate_driveway_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigatefrontyard60' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for 60min"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_frontyard_notifier
            - delay: "00:60:00"
            - service: input_boolean.turn_on
              entity_id: input_boolean.frigate_frontyard_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigategrilldeck60' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for 60min"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_grilldeck_notifier
            - delay: "00:60:00"
            - service: input_boolean.turn_on
              entity_id: input_boolean.frigate_grilldeck_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigatedeck60' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for 60min"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_deck_notifier
            - delay: "00:60:00"
            - service: input_boolean.turn_on
              entity_id: input_boolean.frigate_deck_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigatefrontyardday' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for the remainder of the day"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_frontyard_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigategrilldeckday' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for the remainder of the day"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_grilldeck_notifier
        - conditions: "{{ trigger.event.data.command == '\/mutefrigatedeckday' }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger }} for the remainder of the day"
                show_alert: true
            - service: input_boolean.turn_off
              entity_id: input_boolean.frigate_deck_notifier
      default:
        - service: telegram_bot.answer_callback_query
          data_template:
            callback_query_id: "{{ trigger.event.data.id }}"
            message: "Disabling notifications for {{ trigger }} for the remainder of the day"
            show_alert: true
        - service: input_boolean.turn_off
          entity_id: input_boolean.frigate_driveway_notifier
#########################################
- alias: "Frigate: driveway person arrival"
  id: "Frigate: driveway person arrival"
  mode: restart
  trigger:
    - platform: state
      entity_id: binary_sensor.driveway_far_person_motion
      to: "on"
  action:
    - wait_for_trigger:
        - platform: state
          entity_id: binary_sensor.driveway_near_person_motion
          to: "on"
      timeout: 20
      continue_on_timeout: false
    - service: telegram_bot.send_photo
      data:
        url: http://192.168.30.137/cgi-bin/snapshot.cgi?1
        authentication: digest
        username: admin
        password: !secret dahua-pwd
#########################################
# - alias: "Frigate: driveway departure"
#   id: "Frigate: driveway departure"
#   trigger:
#     - platform: state
#       entity_id:
#         - binary_sensor.near_car_motion
#         - binary_sensor.near_person_motion
#       to: "on"
#   action:
#     - wait_for_trigger:
#         - platform: state
#           entity_id:
#             - binary_sensor.far_person_motion
#             - binary_sensor.far_car_motion
#           to: "on"
#       timeout: 20
#       continue_on_timeout: false
#     - choose: # between the hours of 6-8am, turn on driveway sentry mode
#         - conditions: "{{ now().strftime('%H')|int > 6 and now().strftime('%H')|int < 8 }}"
#           sequence:
#             - service: homeassistant.turn_on
#               entity_id: input_boolean.driveway_sentry
#########################################
- alias: "Frigate: driveway video notification"
  id: "Frigate: driveway video notification"
  description: "if Jons away or were asleep - send a video of the driveway"
  trigger:
    - platform: mqtt
      topic: frigate/events
  condition:
    - "{{ trigger.payload_json['type'] == 'end' }}"
    - condition: state # make sure notifications havent been paused from an actionable notification
      entity_id: input_boolean.frigate_driveway_notifier
      state: "on"
    # - condition: state
    #   entity_id: input_boolean.driveway_sentry
    #   state: "on"
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: or # only driveway camera
      conditions:
        - "{{ trigger.payload_json['after']['camera'] == 'driveway' }}"
        - "{{ trigger.payload_json['before']['camera'] == 'driveway' }}"
  variables:
    camera: "{{ trigger.payload_json['after']['camera'] }}"
  action:
    # download & trim the clip in case its really long, save to a static file
    - service: shell_command.download_file
      data_template:
        url: "http://192.168.30.249:5005/api/events/{{trigger.payload_json['after']['id']}}/clip.mp4"
        download: "/share/{{camera}}.mp4"
    - service: shell_command.trim_video
      data_template:
        duration: "00:00:10"
        clip: "/share/{{camera}}.mp4"
        path: "/share/trimmed-{{camera}}.mp4"
    - service: telegram_bot.send_video
      data_template:
        file: "/share/trimmed-{{camera}}.mp4"
        inline_keyboard:
          - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
        caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
    - delay: 90
#########################################
- alias: "Frigate: frontyard video notification"
  id: "Frigate: frontyard video notification"
  description: "if Jons away or were asleep - send a video of the frontyard"
  trigger:
    - platform: mqtt
      topic: frigate/events
  condition:
    - "{{ trigger.payload_json['type'] == 'end' }}"
    - condition: state # make sure notifications havent been paused from an actionable notification
      entity_id: input_boolean.frigate_frontyard_notifier
      state: "on"
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: or # only frontyard camera
      conditions:
        - "{{ trigger.payload_json['after']['camera'] == 'frontyard' }}"
        - "{{ trigger.payload_json['before']['camera'] == 'frontyard' }}"
  variables:
    camera: "{{ trigger.payload_json['after']['camera'] }}"
  action:
    # download & trim the clip in case its really long, save to a static file
    - service: shell_command.download_file
      data_template:
        url: "http://192.168.30.249:5005/api/events/{{trigger.payload_json['after']['id']}}/clip.mp4"
        download: "/share/{{camera}}.mp4"
    - service: shell_command.trim_video
      data_template:
        duration: "00:00:10"
        clip: "/share/{{camera}}.mp4"
        path: "/share/trimmed-{{camera}}.mp4"
    - service: telegram_bot.send_video
      data_template:
        file: "/share/trimmed-{{camera}}.mp4"
        inline_keyboard:
          - "60m:/mutefrigatefrontyard60, Rest of day:/mutefrigatefrontyardday"
        caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
    - delay: 90
#########################################
- alias: "Frigate: grilldeck video notification"
  id: "Frigate: grilldeck video notification"
  description: "if Jons away or were asleep - send a video of the grilldeck"
  trigger:
    - platform: mqtt
      topic: frigate/events
  condition:
    - "{{ trigger.payload_json['type'] == 'end' }}"
    - condition: state # make sure notifications havent been paused from an actionable notification
      entity_id: input_boolean.frigate_grilldeck_notifier
      state: "on"
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: or # only grilldeck camera
      conditions:
        - "{{ trigger.payload_json['after']['camera'] == 'grilldeck' }}"
        - "{{ trigger.payload_json['before']['camera'] == 'grilldeck' }}"
  variables:
    camera: "{{ trigger.payload_json['after']['camera'] }}"
  action:
    - service: shell_command.download_file
      data_template:
        url: "http://192.168.30.249:5005/api/events/{{trigger.payload_json['after']['id']}}/clip.mp4"
        download: "/share/{{camera}}.mp4"
    - service: shell_command.trim_video
      data_template:
        duration: "00:00:10"
        clip: "/share/{{camera}}.mp4"
        path: "/share/trimmed-{{camera}}.mp4"
    - service: telegram_bot.send_video
      data_template:
        file: "/share/trimmed-{{camera}}.mp4"
        inline_keyboard:
          - "60m:/mutefrigategrilldeck60, Rest of day:/mutefrigategrilldeckday"
        caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
    - delay: 45
#########################################
- alias: "Frigate: deck video notification"
  id: "Frigate: deck video notification"
  description: "if Jons away or were asleep - send a video of the deck"
  trigger:
    - platform: mqtt
      topic: frigate/events
  condition:
    - "{{ trigger.payload_json['type'] == 'end' }}"
    - condition: state # make sure notifications havent been paused from an actionable notification
      entity_id: input_boolean.frigate_deck_notifier
      state: "on"
    - condition: state
      entity_id: binary_sensor.anybody_home
      state: "off"
    - condition: or # only deck camera
      conditions:
        - "{{ trigger.payload_json['after']['camera'] == 'deck' }}"
        - "{{ trigger.payload_json['before']['camera'] == 'deck' }}"
  variables:
    camera: "{{ trigger.payload_json['after']['camera'] }}"
  action:
    - service: shell_command.download_file
      data_template:
        url: "http://192.168.30.249:5005/api/events/{{trigger.payload_json['after']['id']}}/clip.mp4"
        download: "/share/{{camera}}.mp4"
    - service: shell_command.trim_video
      data_template:
        duration: "00:00:10"
        clip: "/share/{{camera}}.mp4"
        path: "/share/trimmed-{{camera}}.mp4"
    - service: telegram_bot.send_video
      data_template:
        file: "/share/trimmed-{{camera}}.mp4"
        inline_keyboard:
          - "60m:/mutefrigatedeck60, Rest of day:/mutefrigatedeckday"
        caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
    - delay: 45
#########################################
# - alias: "Frigate: mudroom video notification"
#   id: "Frigate: mudroom video notification"
#   description: "if Jons away - send a video of the mudroom"
#   trigger:
#     - platform: mqtt
#       topic: frigate/events
#   condition:
#     - "{{ trigger.payload_json['type'] == 'end' }}"
#     - condition: state
#       entity_id: binary_sensor.anybody_home
#       state: "off"
#     - condition: or # only mudroom camera
#       conditions:
#         - "{{ trigger.payload_json['after']['camera'] == 'mudroom' }}"
#         - "{{ trigger.payload_json['before']['camera'] == 'mudroom' }}"
#   variables:
#     camera: "{{ trigger.payload_json['after']['camera'] }}"
#   action:
#     # download & trim the clip in case its really long, save to a static file
#     - service: shell_command.download_file
#       data_template:
#         url: "http://192.168.30.249:5005/api/events/{{trigger.payload_json['after']['id']}}/clip.mp4"
#         download: "/share/{{camera}}.mp4"
#     - service: shell_command.trim_video
#       data_template:
#         duration: "00:00:10"
#         clip: "/share/{{camera}}.mp4"
#         path: "/share/trimmed-{{camera}}.mp4"
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/share/trimmed-{{camera}}.mp4"
#         inline_keyboard:
#           - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
#         caption: "{{trigger.payload_json['after']['label']}} detected. Mute?"
#     - delay: 60
