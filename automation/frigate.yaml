---
#########################################
- alias: "Frigate: disable notifications because of user interaction"
  id: "Frigate: disable notifications because of user interaction"
  description: "options to mute notifications for 60m or the rest of the day"
  mode: parallel
  max: 10
  trigger:
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedoorbell60"
      variables:
        location: doorbell
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedoorbellday"
      variables:
        location: doorbell
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedriveway60"
      variables:
        location: driveway
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedrivewayday"
      variables:
        location: driveway
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeck60"
      variables:
        location: grilldeck
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigategrilldeckday"
      variables:
        location: grilldeck
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeck60"
      variables:
        location: deck
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatedeckday"
      variables:
        location: deck
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyard60"
      variables:
        location: frontyard
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatefrontyardday"
      variables:
        location: frontyard
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatepatio60"
      variables:
        location: patio
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigatepatioday"
      variables:
        location: patio
        time: day
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigateworkshop60"
      variables:
        location: workshop
        time: "60"
    - platform: event
      event_type: telegram_callback
      event_data:
        command: "/mutefrigateworkshopday"
      variables:
        location: workshop
        time: day
  action:
    - choose: # mute the appropriate frigate boolean, and optionally unmute 60m later depending on whats been selected
        - conditions: "{{ trigger.event.data.command == '\/mutefrigate' ~ location ~ time }}"
          sequence:
            - service: telegram_bot.answer_callback_query
              data_template:
                callback_query_id: "{{ trigger.event.data.id }}"
                message: "Disabling notifications for {{ trigger.id }} for {{ time }}"
                show_alert: true
            - service: input_boolean.turn_off
              data_template:
                entity_id: input_boolean.frigate_{{location}}_notifier
            - choose:
                - conditions: "{{time == '60'}}"
                  sequence:
                    - delay: "00:60:00"
                    - service: input_boolean.turn_on
                      data_template:
                        entity_id: input_boolean.frigate_{{location}}_notifier
              default: []
      default:
        - service: system_log.write
          data_template:
            message: "Damnit, defaulting: {{ trigger.event.data.command == '\/mutefrigate' ~ location ~ time }} && {{ mutefrigate ~ location ~ time }} && variable values: {{ location ~ time }} && {{trigger}}"
            level: error
#########################################
# - alias: "LPR: driveway car"
#   id: "LPR: driveway car"
#   trigger:
#     - platform: mqtt
#       topic: frigate/events
#       id: frigate-event
#       payload: driveway
#       value_template: '{{ value_json["after"]["camera"] }}'
#   condition: # only run if a car has entered the far driveway zone
#     - "{{ trigger.payload_json['after']['label'] == 'car' }}"
#     - "{{ 'driveway_far' in trigger.payload_json['after']['entered_zones'] }}"
#     - "{{ states('sensor.platerecognizer_api_calls_remaining') | int > 0 }}"
#   action:
#     - service: image_processing.scan
#       target:
#         entity_id: image_processing.platerecognizer_driveway
#########################################
- alias: "Frigate: mudroom detection based on presence"
  id: "Frigate: mudroom detection based on presence"
  description: "enable/disable detection in the mudroom based on presence"
  trigger:
    - platform: state
      entity_id: binary_sensor.anybody_home
  action:
    - service_template: >
        {% if trigger.to_state.state == 'off' %}homeassistant.turn_on
        {% else %}homeassistant.turn_off{% endif %}
      entity_id: switch.mudroom_detect
#########################################
- alias: "Frigate: track objects approaching the house"
  id: "Frigate: track objects approaching the house"
  description: "send an initial picture on detection, then once it enters the near zone, send a 10s video clip from the go2rtc camera api"
  mode: parallel
  max: 20
  trigger:
    - platform: mqtt
      topic: frigate/events
      payload: deck
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: deck_near
        far_zone: deck_far
        notifier: input_boolean.frigate_deck_notifier
    - platform: mqtt
      topic: frigate/events
      payload: doorbell
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: doorbell_near
        far_zone: doorbell_far
        notifier: input_boolean.frigate_doorbell_notifier
    - platform: mqtt
      topic: frigate/events
      payload: driveway
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: driveway_near
        far_zone: driveway_far
        notifier: input_boolean.frigate_driveway_notifier
    - platform: mqtt
      topic: frigate/events
      payload: grilldeck
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: grilldeck_near
        far_zone: grilldeck_far
        notifier: input_boolean.frigate_grilldeck_notifier
    - platform: mqtt
      topic: frigate/events
      payload: patio
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: patio_near
        far_zone: patio_far
        notifier: input_boolean.frigate_patio_notifier
    - platform: mqtt
      topic: frigate/events
      payload: workshop
      value_template: '{{ value_json["after"]["camera"] }}'
      variables:
        after_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
        before_zones: "{{ trigger.payload_json['before']['entered_zones'] }}"
        label: "{{ trigger.payload_json['after']['label'] }}"
        camera: "{{ trigger.payload_json['after']['camera'] }}"
        id: "{{ trigger.payload_json['after']['id'] }}"
        near_zone: workshop_near
        far_zone: workshop_far
        notifier: input_boolean.frigate_workshop_notifier
  condition:
    - "{{ is_state(notifier, 'on') }}" # make sure notifications havent been paused from an actionable notification
    - "{{ far_zone in after_zones }}"
    - or: # ensure only to notify of objects that are new or just entered a zone. This avoids getting lots of updated notifications for the same object
        - "{{ trigger.payload_json['type'] == 'new' }}"
        - "{{ before_zones | length == 0 }}"
    - or: # always send notifications if Jon is not home OR if the camera is the driveway/doorbell
        - "{{ camera == 'driveway' }}"
        - "{{ camera == 'doorbell' }}"
        - "{{ states('person.jon') != 'home' }}"
  action:
    # Send the initial notification with snapshot and info
    - service: telegram_bot.send_photo
      data:
        url: http://192.168.30.249:5005/api/events/{{id}}/snapshot.jpg
        caption: "{{label}} detected - {{camera}}"
    # download a 10s clip of the event and send it
    - service: shell_command.download_file
      data_template:
        url: "http://192.168.30.249:5005/live/webrtc/api/stream.mp4?src={{camera}}&duration=10" # go2rtc live stream
        download: "/tmp/{{camera}}-{{label}}.mp4"
    # wait for the object to get into the closer zone, then send a video clip notification
    - wait_for_trigger:
        - platform: mqtt
          topic: frigate/events
          value_template: "{{ near_zone in wait.trigger.payload_json['after']['current_zones'] }}"
      timeout: "00:00:50"
      continue_on_timeout: false
    - service: telegram_bot.send_video
      data_template:
        file: "/tmp/{{camera}}-{{label}}.mp4"
        inline_keyboard:
          - "60m:/mutefrigate{{camera}}60, Rest of day:/mutefrigate{{camera}}day"
        caption: "{{label}} detected - {{camera}}"
