- binary_sensor:
    - name: dark out? # true if the sun is below horizon or cloud coverage is greater than 50%
      icon: mdi:weather-night
      unique_id: dark out
      state: "{{ is_state('sun.sun', 'below_horizon') or states('sensor.cloud_cover') | float > 75 }}"
    - name: "Has Unavailable States"
      unique_id: has_unavailable_state
      state: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown', 'none']) | list | count }}"
    - name: Events Today
      unique_id: events_today
      state: >- # state is `on` when there is an event today
        {{ expand(integration_entities('anniversaries')) | selectattr('state') | map(attribute='state') | list | sort | map('int') | sort | min == 0 }}
      attributes:
        events: >-
          {%- set ns = namespace(a=[]) -%}
          {%- for item in expand(integration_entities('anniversaries')) -%}
          {%- set days = [item.state | int] | min -%}
          {%- set next = item.attributes.get('years_at_anniversary') -%}
          {%- set date = item.attributes.get('date') -%}
          {%- if days in [0] %}
          {%- set ns.a = ns.a + [ dict(n=item.name, x=next, d=date.strftime('%Y-%m-%d'), r=days)] %}
          {%- endif -%}
          {%- endfor -%}
          [
          {%- for item in ns.a | sort(attribute='r') -%}
          {%- set name, next, date, days = item.n, item.x, item.d, item.r %}
          {"name": "{{name}}","date": "{{date}}",{%- if next %}"years": {{next}},{%- endif %}"days": {{days}}},
          {%- endfor -%}
          ]
    - name: Events Tomorrow
      unique_id: events_tomorrow
      state: >- # state is `on` when there is an event tomorrow
        {{ expand(integration_entities('anniversaries')) | selectattr('state') | map(attribute='state') | list | sort | map('int') | sort | min == 1 }}
      attributes:
        events: >-
          {%- set ns = namespace(a=[]) -%}
          {%- for item in expand(integration_entities('anniversaries')) -%}
          {%- set days = [item.state | int] | min -%}
          {%- set next = item.attributes.get('years_at_anniversary') -%}
          {%- set date = item.attributes.get('date') -%}
          {%- if days == 1 %}
          {%- set ns.a = ns.a + [ dict(n=item.name, x=next, d=date.strftime('%Y-%m-%d'), r=days)] %}
          {%- endif -%}
          {%- endfor -%}
          [
          {%- for item in ns.a | sort(attribute='r') -%}
          {%- set name, next, date, days = item.n, item.x, item.d, item.r %}
          {"name": "{{name}}","date": "{{date}}",{%- if next %}"years": {{next}},{%- endif %}"days": {{days}}},
          {%- endfor -%}
          ]
    - name: Events in the Next Week
      unique_id: events_in_the_next_week
      state: >- # state is `on` when there is an event in the next 7 days
        {{ expand(integration_entities('anniversaries')) | selectattr('state') | map(attribute='state') | list | sort | map('int') | sort | min < 7 }}
      attributes:
        events: >-
          {%- set ns = namespace(a=[]) -%}
          {%- for item in expand(integration_entities('anniversaries')) -%}
          {%- set days = [item.state | int] | min -%}
          {%- set next = item.attributes.get('years_at_anniversary') -%}
          {%- set date = item.attributes.get('date') -%}
          {%- if days < 7 %}
          {%- set ns.a = ns.a + [ dict(n=item.name, x=next, d=date.strftime('%Y-%m-%d'), r=days)] %}
          {%- endif -%}
          {%- endfor -%}
          [
          {%- for item in ns.a | sort(attribute='r') -%}
          {%- set name, next, date, days = item.n, item.x, item.d, item.r %}
          {"name": "{{name}}","date": "{{date}}",{%- if next %}"years": {{next}},{%- endif %}"days": {{days}}},
          {%- endfor -%}
          ]
    - name: Events in the Next Thirty Days
      unique_id: events_in_the_next_thirty_days
      state: >- # state is `on` when there is an event in the next 30 days
        {{ expand(integration_entities('anniversaries')) | selectattr('state') | map(attribute='state') | list | sort | map('int') | sort | min < 30 }}
      attributes:
        events: >-
          {%- set ns = namespace(a=[]) -%}
          {%- for item in expand(integration_entities('anniversaries')) -%}
          {%- set days = [item.state | int] | min -%}
          {%- set next = item.attributes.get('years_at_anniversary') -%}
          {%- set date = item.attributes.get('date') -%}
          {%- if days < 30 %}
          {%- set ns.a = ns.a + [ dict(n=item.name, x=next, d=date.strftime('%Y-%m-%d'), r=days)] %}
          {%- endif -%}
          {%- endfor -%}
          [
          {%- for item in ns.a | sort(attribute='r') -%}
          {%- set name, next, date, days = item.n, item.x, item.d, item.r %}
          {"name": "{{name}}","date": "{{date}}",{%- if next %}"years": {{next}},{%- endif %}"days": {{days}}},
          {%- endfor -%}
          ]
    - name: "Bed Occupancy"
      icon: mdi:bed
      unique_id: bed_occupancy
      device_class: occupancy
      state: >-
        {{ states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == 'on'
        or states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == 'on' }}
      attributes:
        sleeping: >-
          {% if states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "on"
          and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "on" %}both
          {% elif states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "on"
          and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "off" %}jon
          {% elif states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "off"
          and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "on" %}laura
          {% else %}unoccupied{% endif %}
    - name: "Basement Motions"
      unique_id: basement_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_basmnt_stair_pir') == "Violated"
        or states('sensor.elkm1_gym_pir') == "Violated"
        or states('sensor.elkm1_lounge_pir') == "Violated"
        or states('sensor.elkm1_office_pir') == "Violated"
        or states('sensor.elkm1_workshop_pir') == "Violated" }}
    - name: "Office Motions"
      unique_id: office_motions
      device_class: motion
      state: >-
        {{ states('binary_sensor.occupancy') == "on"
        or states('sensor.elkm1_office_pir') == "Violated" }}
    - name: "Main Motions"
      unique_id: main_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_back_kitchen_pir') == "Violated"
        or states('sensor.elkm1_foyer_pir') == "Violated"
        or states('sensor.elkm1_great_room_pir') == "Violated"
        or states('sensor.elkm1_kitchen_pir') == "Violated"
        or states('sensor.elkm1_library_pir') == "Violated"
        or states('sensor.elkm1_mudroom_pir') == "Violated"
        or states('sensor.elkm1_sunroom_pir') == "Violated" }}
    - name: "Upstairs Motions"
      unique_id: upstairs_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_bonus_hall_pir') == "Violated"
        or states('sensor.elkm1_laundry_pir') == "Violated"
        or states('sensor.elkm1_main_bath_pir') == "Violated"
        or states('sensor.elkm1_main_bed_pir') == "Violated"
        or states('sensor.elkm1_second_hall_pir') == "Violated" }}
    - name: "Exterior Motions"
      unique_id: exterior_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_garage_pir') == "Violated" }}
    - name: "All Motions"
      unique_id: all_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_basmnt_stair_pir') == "Violated"
        or states('sensor.elkm1_gym_pir') == "Violated"
        or states('sensor.elkm1_lounge_pir') == "Violated"
        or states('sensor.elkm1_office_pir') == "Violated"
        or states('sensor.elkm1_workshop_pir') == "Violated"
        or states('sensor.elkm1_back_kitchen_pir') == "Violated"
        or states('sensor.elkm1_foyer_pir') == "Violated"
        or states('sensor.elkm1_great_room_pir') == "Violated"
        or states('sensor.elkm1_kitchen_pir') == "Violated"
        or states('sensor.elkm1_library_pir') == "Violated"
        or states('sensor.elkm1_mudroom_pir') == "Violated"
        or states('sensor.elkm1_sunroom_pir') == "Violated"
        or states('sensor.elkm1_bonus_hall_pir') == "Violated"
        or states('sensor.elkm1_laundry_pir') == "Violated"
        or states('sensor.elkm1_main_bath_pir') == "Violated"
        or states('sensor.elkm1_main_bed_pir') == "Violated"
        or states('sensor.elkm1_second_hall_pir') == "Violated"
        or states('sensor.elkm1_garage_pir') == "Violated" }}
    - name: "Kitchen Area Motions"
      unique_id: kitchen_area_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_back_kitchen_pir') == "Violated"
        or states('sensor.elkm1_foyer_pir') == "Violated"
        or states('sensor.elkm1_great_room_pir') == "Violated"
        or states('sensor.elkm1_kitchen_pir') == "Violated" }}
    - name: "Garage Doors"
      unique_id: garage_doors
      device_class: garage_door
      state: >-
        {{ states('sensor.elkm1_double_garage') == "Violated"
        or states('sensor.elkm1_single_garage') == "Violated" }}
    - name: "House Doors"
      unique_id: house_doors
      device_class: door
      state: >-
        {{ states('sensor.elkm1_front_door') == "Violated"
        or states('sensor.elkm1_garage_door') == "Violated"
        or states('sensor.elkm1_patio_door') == "Violated"
        or states('sensor.elkm1_workshop_door') == "Violated"
        or states('sensor.elkm1_grilldeck_door') == "Violated"
        or states('sensor.elkm1_deck_door') == "Violated" }}
    - name: "Moisture Sensors"
      unique_id: moisture_sensors
      device_class: moisture
      state: >-
        {{ states('sensor.elkm1_basement_bath_wb') == "Violated"
        or states('sensor.elkm1_powder_wb') == "Violated"
        or states('sensor.elkm1_eveylns_bath_wb') == "Violated"
        or states('sensor.elkm1_jack_and_jill_wb') == "Violated"
        or states('sensor.elkm1_main_bath_wb') == "Violated"
        or states('sensor.elkm1_upper_laundry_wb') == "Violated"
        or states('binary_sensor.kitchen_leak_water_leak_detected') == "on"
        or states('binary_sensor.bar_leak_water_leak_detected') == "on" }}
    - name: "Vacation?"
      unique_id: vacation
      device_class: occupancy
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_vacation' }}"
    - name: "Occupied-Alarm?"
      unique_id: occupied_alarm
      device_class: occupancy
      state: >-
        {{ not (state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_vacation'
        or state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_away') }}
    - name: "Sleeping?"
      unique_id: sleeping
      state: >-
        {{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_night_instant'
        or state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_night' }}
    - name: "light inside?"
      unique_id: light_inside
      device_class: light
      state: "{{ states('sensor.main_tv_lux') | int > 90 }}"
    - name: "light inside basement?"
      unique_id: light_inside_basement
      device_class: light
      state: "{{ states('sensor.lounge_pir_illuminance') | int > 50 }}"
    - name: "Anybody Home"
      unique_id: anybody_home
      device_class: presence
      state: >-
        {{ states('person.jon') == 'home'
        and states('person.laura') == 'home' }}
    - name: "Anybody Away"
      unique_id: anybody_away
      state: >-
        {{ states('person.jon') != 'home'
        or states('person.laura') != 'home' }}
    - name: "Exterior Person"
      unique_id: exterior_person
      device_class: occupancy
      state: >-
        {{ states('binary_sensor.deck_person_occupancy') == "on"
        or states('binary_sensor.doorbell_person_occupancy') == "on"
        or states('binary_sensor.driveway_person_occupancy') == "on"
        or states('binary_sensor.frontyard_person_occupancy') == "on"
        or states('binary_sensor.grilldeck_person_occupancy') == "on"
        or states('binary_sensor.patio_person_occupancy') == "on"
        or states('binary_sensor.workshop_person_occupancy') == "on" }}
    - name: "Main Bedroom Occupied"
      unique_id: main_bedroom_occupied
      device_class: occupancy
      state: >-
        {{ states('sensor.elkm1_main_bath_pir') == "Violated"
        or states('sensor.elkm1_main_bed_pir') == "Violated" }}
    - name: "Christmas Season"
      unique_id: christmas_season
      state: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {{ month == 11 and day >= 22
        or month == 12
        or month == 1 and day <= 6 }}
    - name: All Sonos
      unique_id: all_sonos
      state: >-
        {{ states('media_player.deck') == "playing"
        or states('media_player.den') == "playing"
        or states('media_player.gym') == "playing"
        or states('media_player.kitchen') == "playing"
        or states('media_player.living_room') == "playing"
        or states('media_player.main_bathroom') == "playing"
        or states('media_player.main_bedroom') == "playing"
        or states('media_player.media_room') == "playing"
        or states('media_player.office') == "playing"
        or states('media_player.patio') == "playing"
        or states('media_player.sunroom') == "playing" }}
    - name: HVAC
      unique_id: hvac
      state: >-
        {{ states('sensor.lower_level_hvac_action') != "idle"
        or states('sensor.main_level_hvac_action') != "idle"
        or states('sensor.upper_level_hvac_action') != "idle" }}
    - name: HVAC Heat
      unique_id: hvac_heat
      state: >-
        {{ states('sensor.lower_level_hvac_action') == "heating"
        or states('sensor.main_level_hvac_action') == "heating"
        or states('sensor.upper_level_hvac_action') == "heating" }}
    - name: HVAC AC
      unique_id: hvac_ac
      state: >-
        {{ states('sensor.lower_level_hvac_action') == "cooling"
        or states('sensor.main_level_hvac_action') == "cooling"
        or states('sensor.upper_level_hvac_action') == "cooling" }}
    - name: wireguard peer macbook
      state: "{{ state_attr('sensor.wireguard_peers_status_api', 'macbook').latest_handshake > as_timestamp(now()) - 180 }}"
    - name: wireguard peer jons-phone
      state: "{{ state_attr('sensor.wireguard_peers_status_api', 'jons-phone').latest_handshake > as_timestamp(now()) - 180 }}"

- sensor:
    - name: recycle
      icon: mdi:garbage
      unique_id: recycle
      # check if its an odd/even week. then, check if its before/after tuesday (waste pickup day)
      state: >-
        {% if not now().isocalendar()[1] % 2 %}
          {%- if now().weekday() | int < 1 %}
            {{ state_attr('schedule.tuesdays', 'next_event') }}
          {%- else -%}
            {{ state_attr('schedule.tuesdays', 'next_event') + timedelta(days=7) }}
          {%- endif -%}
        {%- else -%}
          {%- if now().weekday() | int < 1 %}
            {{ state_attr('schedule.tuesdays', 'next_event') + timedelta(days=7) }}
          {%- else -%}
            {{ state_attr('schedule.tuesdays', 'next_event') }}
          {%- endif -%}
        {%endif%}
    - name: trash
      icon: mdi:garbage
      unique_id: trash
      state: "{{ state_attr('schedule.tuesdays', 'next_event') }}"
    - name: "Bed Occupancy"
      icon: mdi:bed
      unique_id: bed_occupancy_sensor
      state: >-
        {% if states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "on"
        and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "on" %}both
        {% elif states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "on"
        and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "off" %}jon
        {% elif states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == "off"
        and states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == "on" %}laura
        {% else %}unoccupied{% endif %}
    - name: "Armed Status"
      unique_id: armed_status
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') }}"
    - name: "Arm Up State"
      unique_id: arm_up_state
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'arm_up_state') }}"
    - name: "Alarm State"
      unique_id: alarm_state
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'alarm_state') }}"
    - name: "Alarm Trouble"
      unique_id: alarm_trouble
      state: "{{ state_attr('sensor.elkm1_elkm1', 'system_trouble_status') }}"
    - name: "sun elevation"
      state: "{{ state_attr('sun.sun', 'elevation') }}"
      unique_id: sun_elevation
    - name: "Number of Sensors"
      unique_id: number_of_sensors
      state: >
        {%- set domains = ['sensor'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    - name: "Lights On"
      unit_of_measurement: "On"
      state: "{{ states.light|selectattr('state', 'equalto', 'on')|list|length }}"
      unique_id: lights_on_number
    - name: "Doors Locked"
      state: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|map(attribute='name')| list|join(', ') }}"
      unique_id: doors_locked
    - name: "Doors Locked Entities"
      state: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|map(attribute='entity_id')| list|join(', ') }}"
      unique_id: doors_locked_entities
    - name: "Number of Doors Locked"
      state: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|length }}"
      unique_id: doors_locked_number
    - name: "Doors Unlocked"
      state: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|map(attribute='name')| list|join(', ') }}"
      unique_id: doors_unlocked
    - name: "Doors Unlocked Entities"
      state: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|map(attribute='entity_id')| list|join(', ') }}"
      unique_id: doors_unlocked_entities
    - name: "Number of Doors Unlocked"
      state: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|length }}"
      unique_id: doors_unlocked_number
    - name: "People Home"
      state: "{{ states.person|selectattr('state', 'equalto', 'home')|list|map(attribute='name')| list|join(', ') }}"
      unique_id: people_home
    - name: "Number of People Home"
      state: "{{ states.person|selectattr('state', 'equalto', 'home')|list|length }}"
      unique_id: people_home_number
    - name: "period of day"
      unique_id: period_of_day
      state: >-
        {% set elevation = state_attr('sun.sun', 'elevation') %}
        {% set rising = state_attr('sun.sun', 'rising') %}
        {%- if elevation <= -12 -%}
          night
        {%- elif -12 < elevation <= -6 -%}
          {{ 'dawn' if rising else 'dusk' }}
        {%- else -%}
          day
        {%- endif -%}
      icon: >-
        {% set elevation = state_attr('sun.sun', 'elevation') %}
        {% set rising = state_attr('sun.sun', 'rising') %}
        {%- if elevation <= -12 -%}
          mdi:weather-night
        {%- elif -12 < elevation <= -6 -%}
          mdi:weather-sunset-{{ 'up' if rising else 'down' }}
        {% else %}
          mdi:weather-sunny
        {% endif %}
    - name: cyberpower ups
      unique_id: cyberpower_ups
      state: >-
        {% if   states('sensor.cyberpower_ups_battery_runtime') | int < 180 %}three
        {% elif states('sensor.cyberpower_ups_battery_runtime') | int < 300 %}five
        {% elif states('sensor.cyberpower_ups_battery_runtime') | int < 600 %}ten
        {% elif states('sensor.cyberpower_ups_battery_runtime') | int < 1200 %}twenty
        {% else %}okay{% endif %}
    - name: "target humidity max"
      unique_id: target_humidity_max
      device_class: humidity
      state: >-
        {% if   state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -20 %}25
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -10 %}30
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <   0 %}35
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  10 %}40
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  20 %}45
        {% else %} 55 {% endif %}
    - name: "target humidity min"
      unique_id: target_humidity_min
      device_class: humidity
      state: >-
        {% if   state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -20 %}15
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -10 %}20
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <   0 %}25
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  10 %}30
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  20 %}35
        {% else %} 40 {% endif %}
    - name: "Current Temperature"
      unique_id: current_temperature
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'temperature') }}"
      unit_of_measurement: "°F"
    - name: "Current Feels"
      unique_id: current_feels
      state: "feels like {{ states('sensor.tomorrow_io_home_feels_like') }}"
      unit_of_measurement: "°F"
    - name: "Cloud Cover"
      unique_id: cloud_cover
      state: "{{ states('sensor.tomorrow_io_home_cloud_cover') | round | int }}"
    - name: "Current Humidity"
      unique_id: current_humidity
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'humidity') }}%"
    - name: "daily_high"
      unique_id: daily_high
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].temperature }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Todays Low"
      unique_id: todays_low
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].templow }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Precipitation Amount"
      unique_id: precipitation_amount
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].precipitation }}"
    - name: "Precipitation Probability"
      unique_id: precipitation_probability
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].precipitation_probability | round | int }}%"
    - name: "circadian brightness"
      unique_id: circadian_brightness
      state: "{{ state_attr('switch.adaptive_lighting_default', 'brightness_pct') }}"
    ############################
    ## HVAC Sensors
    - name: "Lower Level Temperature"
      unique_id: lower_level_temperature
      state: "{{ state_attr('climate.lower_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Main Level Temperature"
      unique_id: main_level_temperature
      state: "{{ state_attr('climate.main_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Upper Level Temperature"
      unique_id: upper_level_temperature
      state: "{{ state_attr('climate.upper_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    ##
    - name: "Lower Level Hold State"
      unique_id: lower_level_hold_state
      state: "{{ state_attr('climate.lower_level', 'hold_state') }}"
    - name: "Main Level Hold State"
      unique_id: main_level_hold_state
      state: "{{ state_attr('climate.main_level', 'hold_state') }}"
    - name: "Upper Level Hold State"
      unique_id: upper_level_hold_state
      state: "{{ state_attr('climate.upper_level', 'hold_state') }}"
    ##
    - name: "Lower Level HVAC Action"
      unique_id: lower_level_hvac_action
      state: "{{ state_attr('climate.lower_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    - name: "Main Level HVAC Action"
      unique_id: main_level_hvac_action
      state: "{{ state_attr('climate.main_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    - name: "Upper Level HVAC Action"
      unique_id: upper_level_hvac_action
      state: "{{ state_attr('climate.upper_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    ##
    - name: "Outdoor HVAC Temperature"
      unique_id: outdoor_hvac_temperature
      state: "{{ state_attr('climate.main_level', 'outdoor_temperature') }}"
      unit_of_measurement: "°F"
    ##
    - name: "HVAC Humidity"
      unique_id: hvac_humidity
      state: "{{ state_attr('climate.main_level', 'current_humidity') }}"
      unit_of_measurement: "%"
    ############################
