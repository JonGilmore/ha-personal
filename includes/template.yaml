# yaml-language-server: $schema=https://cdn.jsdelivr.net/npm/homeassistant-js-yaml-schema@1.1.1/src/index.min.js
- binary_sensor:
    - name: "Shades Should Close"
      unique_id: binary_sensor.shades_should_close
      # inspiration: https://community.home-assistant.io/t/automatic-blinds-sunscreen-control-based-on-sun-platform/573818/193
      state: >
        {{ (states('sensor.tomorrow_io_home_cloud_cover') | float < 65.0
        or states('sensor.weatherflow_tempest_illuminance') | float > 7000.0)
        and states('sensor.weatherflow_tempest_solar_elevation') | float > 5.0 }}
    - name: "Events Today"
      unique_id: events_today # https://community.home-assistant.io/t/filtering-out-anniversaries-in-my-glance-card/275891/17
      icon: "{{ 'mdi:alert-circle' if is_state(this.entity_id, 'on') else 'mdi:check-circle' }}"
      unit_of_measurement: people
      state: |
        {% from 'events.jinja' import events_bool %}
        {{ events_bool(equal=0) }}
      attributes:
        entity_id: |
          {% from 'events.jinja' import events %}
          {{ events(equal=0) }}
    - name: "Events Tomorrow"
      unique_id: events_tomorrow
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:alert-circle', 'mdi:check-circle') }}"
      unit_of_measurement: people
      state: |
        {% from 'events.jinja' import events_bool %}
        {{ events_bool(equal=1) }}
      attributes:
        entity_id: |
          {% from 'events.jinja' import events %}
          {{ events(equal=1) }}
    - name: "Events in the Next Week"
      unique_id: events_in_the_next_week
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:alert-circle', 'mdi:check-circle') }}"
      unit_of_measurement: people
      state: |
        {% from 'events.jinja' import events_bool %}
        {{ events_bool(lessthan=7) }}
      attributes:
        entity_id: |
          {% from 'events.jinja' import events %}
          {{ events(lessthan=7) }}
    - name: "Events in Seven Days"
      unique_id: events_in_seven_days
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:alert-circle', 'mdi:check-circle') }}"
      unit_of_measurement: people
      state: |
        {% from 'events.jinja' import events_bool %}
        {{ events_bool(equal=7) }}
      attributes:
        entity_id: |
          {% from 'events.jinja' import events %}
          {{ events(equal=7) }}
    - name: Events in the Next Thirty Days
      unique_id: events_in_the_next_thirty_days
      icon: "{{ iif(is_state(this.entity_id, 'on'), 'mdi:alert-circle', 'mdi:check-circle') }}"
      unit_of_measurement: people
      state: |
        {% from 'events.jinja' import events_bool %}
        {{ events_bool(lessthan=30) }}
      attributes:
        entity_id: |
          {% from 'events.jinja' import events %}
          {{ events(lessthan=30) }}
    - name: "AdBlocking"
      icon: "{{ iif(states(this.entity_id) == 'on','mdi:advertisements-off','mdi:advertisements') }}"
      unique_id: adblocking
      state: >-
        {{ states('switch.adguard_home_protection_2') == 'on'
        and states('switch.adguard_home_protection') == 'on' }}
    - name: "Has Unavailable States"
      unique_id: has_unavailable_state
      state: "{{ states | selectattr('state', 'in', ['unavailable', 'unknown', 'none']) | list | count }}"
    - name: "Bed Occupancy"
      icon: mdi:bed
      unique_id: bed_occupancy
      device_class: occupancy
      state: >-
        {{ states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') == 'on'
        or states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') == 'on' }}
      attributes:
        sleeping: >-
          {% set jon_in_bed = states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') %}
          {% set laura_in_bed = states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') %}
          {% set result = 
            'both' if jon_in_bed == 'on' and laura_in_bed == 'on' else
            'jon' if jon_in_bed == 'on' and laura_in_bed == 'off' else
            'laura' if jon_in_bed == 'off' and laura_in_bed == 'on' else
            'unoccupied'
          %}
          {{ result }}
    - name: "Basement Motions"
      unique_id: basement_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_basmnt_stair_pir') == "Violated"
        or states('sensor.elkm1_gym_pir') == "Violated"
        or states('sensor.elkm1_lounge_pir') == "Violated"
        or states('sensor.elkm1_office_pir') == "Violated"
        or states('sensor.elkm1_workshop_pir') == "Violated" }}
    - name: "Office Motions"
      unique_id: office_motions
      device_class: motion
      state: >-
        {{ states('binary_sensor.apollo_office_multi_bb2a6c_radar_moving_target') == "on"
        or states('sensor.elkm1_office_pir') == "Violated" }}
    - name: "Main Motions"
      unique_id: main_motions
      device_class: motion
      state: >
        {{ "Violated" in [states('sensor.elkm1_back_kitchen_pir'),
          states('sensor.elkm1_foyer_pir'),
          states('sensor.elkm1_great_room_pir'),
          states('sensor.elkm1_kitchen_pir'),
          states('sensor.elkm1_library_pir'),
          states('sensor.elkm1_mudroom_pir'),
          states('sensor.elkm1_sunroom_pir')] or
          is_state('binary_sensor.main_floor_kitchen_occupancy', 'on') }}
    - name: "Upstairs Motions"
      unique_id: upstairs_motions
      device_class: motion
      state: >
        {{ "Violated" in [states('sensor.elkm1_bonus_hall_pir'),
          states('sensor.elkm1_laundry_pir'),
          states('sensor.elkm1_main_bath_pir'),
          states('sensor.elkm1_main_bed_pir'),
          states('sensor.elkm1_second_hall_pir')] }}
    - name: "Exterior Motions"
      unique_id: exterior_motions
      device_class: motion
      state: "{{ states('sensor.elkm1_garage_pir') == 'Violated' }}"
    - name: "All Motions"
      unique_id: all_motions
      device_class: motion
      state: >-
        {{ "Violated" in [states('sensor.elkm1_basmnt_stair_pir'),
          states('sensor.elkm1_gym_pir'),
          states('sensor.elkm1_lounge_pir'),
          states('sensor.elkm1_office_pir'),
          states('sensor.elkm1_workshop_pir'),
          states('sensor.elkm1_back_kitchen_pir'),
          states('sensor.elkm1_foyer_pir'),
          states('sensor.elkm1_great_room_pir'),
          states('sensor.elkm1_kitchen_pir'),
          states('sensor.elkm1_library_pir'),
          states('sensor.elkm1_mudroom_pir'),
          states('sensor.elkm1_sunroom_pir'),
          states('sensor.elkm1_bonus_hall_pir'),
          states('sensor.elkm1_laundry_pir'),
          states('sensor.elkm1_main_bath_pir'),
          states('sensor.elkm1_main_bed_pir'),
          states('sensor.elkm1_second_hall_pir'),
          states('sensor.elkm1_garage_pir')] or
          is_state('binary_sensor.main_floor_kitchen_occupancy', 'on') }}
    - name: "Kitchen Area Motions"
      unique_id: kitchen_area_motions
      device_class: motion
      state: >-
        {{ states('sensor.elkm1_back_kitchen_pir') == "Violated"
        or states('sensor.elkm1_foyer_pir') == "Violated"
        or states('sensor.elkm1_great_room_pir') == "Violated"
        or states('sensor.elkm1_kitchen_pir') == "Violated"
        or is_state('binary_sensor.main_floor_kitchen_occupancy', 'on') }}
    - name: "Garage Doors"
      unique_id: garage_doors
      device_class: garage_door
      state: >-
        {{ states('sensor.elkm1_double_garage') == "Violated"
        or states('sensor.elkm1_single_garage') == "Violated" }}
    - name: "House Doors"
      unique_id: house_doors
      device_class: door
      state: >-
        {{ states('sensor.elkm1_front_door') == "Violated"
        or states('sensor.elkm1_garage_door') == "Violated"
        or states('sensor.elkm1_patio_door') == "Violated"
        or states('sensor.elkm1_workshop_door') == "Violated"
        or states('sensor.elkm1_grilldeck_door') == "Violated"
        or states('sensor.elkm1_deck_door') == "Violated" }}
    - name: "Moisture Sensors"
      unique_id: moisture_sensors
      device_class: moisture
      state: >-
        {{ states('sensor.elkm1_basement_bath_wb') == "Violated"
        or states('sensor.elkm1_powder_wb') == "Violated"
        or states('sensor.elkm1_eveylns_bath_wb') == "Violated"
        or states('sensor.elkm1_jack_and_jill_wb') == "Violated"
        or states('sensor.elkm1_main_bath_wb') == "Violated"
        or states('sensor.elkm1_upper_laundry_wb') == "Violated"
        or states('binary_sensor.kitchen_leak_water_leak_detected') == "on"
        or states('binary_sensor.bar_leak_water_leak_detected') == "on" }}
    - name: "Vacation?"
      unique_id: vacation
      device_class: occupancy
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_vacation' }}"
    - name: "Occupied-Alarm?"
      unique_id: occupied_alarm
      device_class: occupancy
      state: >-
        {{ not (state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_vacation'
        or state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_away') }}
    - name: "Sleeping?"
      unique_id: sleeping
      state: >-
        {{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_night_instant'
        or state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') == 'armed_to_night' }}
    - name: "light inside?"
      unique_id: light_inside
      device_class: light
      state: "{{ states('sensor.outdoor_pir_illuminance') | int > 325 }}"
    - name: "light outside?"
      unique_id: light_outside
      device_class: light
      state: "{{ states('sensor.weatherflow_tempest_illuminance') | int > 165 }}"
    - name: "camera day mode lux"
      unique_id: camera_day_mode_lux
      device_class: light
      state: "{{ states('sensor.outdoor_pir_illuminance') | int > 45 }}"
    # - name: "light inside basement?"
    #   unique_id: light_inside_basement
    #   device_class: light
    #   state: "{{ states('sensor.lounge_pir_illuminance') | int > 50 }}"
    - name: "Anybody Home"
      unique_id: anybody_home
      device_class: presence
      state: >-
        {{ states('person.jon') == 'home'
        and states('person.laura') == 'home' }}
    - name: "Anybody Away"
      unique_id: anybody_away
      state: >-
        {{ states('person.jon') != 'home'
        or states('person.laura') != 'home' }}
    - name: "Exterior Person"
      unique_id: exterior_person
      device_class: occupancy
      state: >-
        {{ states('binary_sensor.deck_person_occupancy') == "on"
        or states('binary_sensor.doorbell_person_occupancy') == "on"
        or states('binary_sensor.driveway_person_occupancy') == "on"
        or states('binary_sensor.frontyard_person_occupancy') == "on"
        or states('binary_sensor.grilldeck_person_occupancy') == "on"
        or states('binary_sensor.patio_person_occupancy') == "on"
        or states('binary_sensor.workshop_person_occupancy') == "on" }}
    - name: "Main Bedroom Occupied"
      unique_id: main_bedroom_occupied
      device_class: occupancy
      state: >-
        {{ states('sensor.elkm1_main_bath_pir') == "Violated"
        or states('sensor.elkm1_main_bed_pir') == "Violated"
        or states('binary_sensor.bed_occupancy') == "on" }}
    - name: "Christmas Season"
      unique_id: christmas_season
      state: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {{ month == 11 and day >= 15
        or month == 12
        or month == 1 and day <= 6 }}
    - name: "All Sonos"
      unique_id: all_sonos
      state: >-
        {{ "playing" in [states('media_player.deck'),
          states('media_player.library_sonos'),
          states('media_player.gym'),
          states('media_player.kitchen'),
          states('media_player.living_room'),
          states('media_player.main_bathroom'),
          states('media_player.main_bedroom'),
          states('media_player.media_room'),
          states('media_player.office'),
          states('media_player.patio'),
          states('media_player.sunroom')] }}
    - name: HVAC
      unique_id: hvac
      state: >-
        {{ states('sensor.lower_level_hvac_action') != "idle"
        or states('sensor.main_level_hvac_action') != "idle"
        or states('sensor.upper_level_hvac_action') != "idle" }}
    - name: HVAC Heat
      unique_id: hvac_heat
      state: >-
        {{ states('sensor.lower_level_hvac_action') == "heating"
        or states('sensor.main_level_hvac_action') == "heating"
        or states('sensor.upper_level_hvac_action') == "heating" }}
    - name: HVAC AC
      unique_id: hvac_ac
      state: >-
        {{ states('sensor.lower_level_hvac_action') == "cooling"
        or states('sensor.main_level_hvac_action') == "cooling"
        or states('sensor.upper_level_hvac_action') == "cooling" }}

- sensor:
    - name: "Platerecognizer API Calls Remaining"
      unique_id: platerecognizer_api_calls_remaining
      icon: mdi:api
      state: "{{ state_attr('image_processing.platerecognizer_driveway', 'statistics').calls_remaining }}"
    - name: recycle
      icon: mdi:garbage
      unique_id: recycle
      # check if its an odd/even week. then, check if its before/after tuesday (waste pickup day). if its before tuesday, use the next tuesday.
      ## if its after tuesday, use the next tuesday. On tues itself, if its before 9:30am (which is when schedule.tuesdays is set to), set it
      ## to the following tuesday
      ## credit to: https://brianhanifin.com/posts/home-assistant-date-time-template-macros/
      state: >-
        {% if not now().isocalendar()[1] % 2 %}
          {%- if now().weekday() | int < 1 %}
            {{ state_attr('schedule.tuesdays', 'next_event') }}
          {%- else -%}
            {{ state_attr('schedule.tuesdays', 'next_event') + timedelta(days=7) }}
          {%- endif -%}
        {%- else -%}
          {%- if (now().weekday() | int < 1) or (now().weekday() | int == 2 and now().hour <= 9 and now().minute < 30) %}
            {{ state_attr('schedule.tuesdays', 'next_event') + timedelta(days=7) }}
          {%- else -%}
            {{ state_attr('schedule.tuesdays', 'next_event') }}
          {%- endif -%}
        {%endif%}
    - name: Power Net
      unique_id: power_net
      state_class: measurement
      icon: mdi:home-lightning-bolt
      unit_of_measurement: W
      device_class: power
      state: "{{ states('sensor.power_consumption') | int(0) - states('sensor.power_production') | int(0) }}"
    - name: Power Export
      unique_id: power_export
      state_class: measurement
      icon: mdi:transmission-tower
      unit_of_measurement: W
      device_class: power
      state: "{{ [0, states('sensor.power_production') | int(0) - states('sensor.power_consumption') | int(0) ] | max }}"
    - name: Power Import
      unique_id: power_import
      state_class: measurement
      icon: mdi:transmission-tower
      unit_of_measurement: W
      device_class: power
      state: "{{ [0, states('sensor.power_consumption') | int(0) - states('sensor.power_production') | int(0) ] | max }}"
    - name: Energy Net
      unique_id: energy_net
      state_class: total
      icon: mdi:transmission-tower
      unit_of_measurement: kWh
      device_class: energy
      state: "{{ (states('sensor.energy_import') | float(0) - states('sensor.energy_export') | float(0)) | round(2) }}"
    - name: Energy Consumption
      unique_id: energy_consumption
      state_class: total
      icon: mdi:home-lightning-bolt
      unit_of_measurement: kWh
      device_class: energy
      state: "{{ (states('sensor.energy_production') | float(0) + states('sensor.energy_net') | float(0)) | round(2) }}"
    - name: TOU Period
      unique_id: tou_period
      icon: mdi:clock-time-three-outline
      state: >
        {% set current_month = now().month %}
        {% if current_month in [6, 7, 8, 9] %}
          summer
        {% else %}
          winter
        {% endif %}
    - name: Tariff Price
      unique_id: tariff_price
      unit_of_measurement: ¢/kWh
      state: >
        {% if is_state('sensor.tou_period', 'summer') %}
          {{ states('input_number.summer') | float(0) }}
        {% else %}
          {{ states('input_number.winter') | float(0) }}
        {% endif %}
    - name: Tariff Price Export
      unique_id: tariff_price_export
      unit_of_measurement: ¢/kWh
      state: >
        {% if is_state('sensor.tou_period', 'summer') %}
          {{ states('input_number.summer') | float(0) }}
        {% else %}
          {{ states('input_number.winter') | float(0) }}
        {% endif %}
    - name: trash
      icon: mdi:garbage
      unique_id: trash
      state: "{{ state_attr('schedule.tuesdays', 'next_event') }}"
    - name: "Bed Occupancy"
      icon: mdi:bed
      unique_id: bed_occupancy_sensor
      state: >-
        {% set jon_in_bed = states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed') %}
        {% set laura_in_bed = states('binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed') %}
        {% if jon_in_bed == "on" and laura_in_bed == "on" %}both
        {% elif jon_in_bed == "on" and laura_in_bed == "off" %}jon
        {% elif jon_in_bed == "off" and laura_in_bed == "on" %}laura
        {% else %}unoccupied
        {% endif %}
    - name: "Armed Status"
      unique_id: armed_status
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'armed_status') }}"
    - name: "Arm Up State"
      unique_id: arm_up_state
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'arm_up_state') }}"
    - name: "Alarm State"
      unique_id: alarm_state
      state: "{{ state_attr('alarm_control_panel.elkm1_area_1', 'alarm_state') }}"
    - name: "Alarm Trouble"
      unique_id: alarm_trouble
      state: "{{ state_attr('sensor.elkm1_elkm1', 'system_trouble_status') }}"
    - name: "sun elevation"
      state: "{{ state_attr('sun.sun', 'elevation') }}"
      unique_id: sun_elevation
    - name: "Number of Sensors"
      unique_id: number_of_sensors
      state: >
        {% set count = namespace(value=0) %}
        {%- for domain in ['sensor'] -%}
          {%- set count.value = count.value + states[domain] | count -%}
        {%- endfor -%}
        {{ count.value }}
    - name: "Lights On"
      unit_of_measurement: "On"
      state: "{{ states.light|selectattr('state', 'equalto', 'on')|list|length }}"
      unique_id: lights_on_number
    - name: "Doors Locked"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'locked')|list|map(attribute='name')|list|join(', ') }}"
      unique_id: doors_locked
    - name: "Doors Locked Entities"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'locked')|list|map(attribute='entity_id')|list|join(', ') }}"
      unique_id: doors_locked_entities
    - name: "Number of Doors Locked"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'locked')|list|length }}"
      unique_id: doors_locked_number
    - name: "Doors Unlocked"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'unlocked')|list|map(attribute='name')|list|join(', ') }}"
      unique_id: doors_unlocked
    - name: "Doors Unlocked Entities"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'unlocked')|list|map(attribute='entity_id')|list|join(', ') }}"
      unique_id: doors_unlocked_entities
    - name: "Number of Doors Unlocked"
      state: "{{ expand('lock.garage_lock', 'lock.mudroom_lock', 'lock.workshop_lock')|selectattr('state', 'eq', 'unlocked')|list|length }}"
      unique_id: doors_unlocked_number
    - name: "Number of Non-vacation Doors Unlocked"
      state: "{{ states | selectattr('entity_id', 'in', state_attr('group.door_locks_shop_mudroom', 'entity_id')) | selectattr('state', 'eq', 'unlocked') | list | count }}"
      unique_id: number_of_non_vacation_doors_unlocked
      # icon: "{{ 'mdi:lock-open' if states(this.entity_id) | int > 0 else 'mdi:lock' }}"
    - name: "Non-vacation Doors Unlocked"
      state: "{{ states | selectattr('entity_id', 'in', state_attr('group.door_locks_shop_mudroom', 'entity_id'))|selectattr('state', 'equalto', 'unlocked')|list|map(attribute='name')| list|join(', ') }}"
      unique_id: non_vacation_doors_unlocked
      # icon: "{{ 'mdi:lock-open' if states(this.entity_id) | int > 0 else 'mdi:lock' }}"
    - name: "Doors Open"
      state: "{{ expand('group.all_doors') | selectattr('state', 'in', ['on']) | map(attribute='name') | list | join(', ') }}"
      unique_id: doors_open
    - name: "Doors Open Entities"
      state: "{{ expand('group.all_doors') | selectattr('state', 'in', ['on']) | map(attribute='entity_id') | list | join(', ') }}"
      unique_id: doors_open_entities
    - name: "Number of Doors Open"
      state: "{{ expand('group.all_doors') | selectattr('state', 'in', ['on']) | list | length }}"
      unique_id: doors_open_number
    - name: "People Home"
      state: "{{ states.person|selectattr('state', 'equalto', 'home')|list|map(attribute='name')| list|join(', ') }}"
      unique_id: people_home
    - name: "Number of People Home"
      state: "{{ states.person|selectattr('state', 'equalto', 'home')|list|length }}"
      unique_id: people_home_number
    - name: "period of day"
      unique_id: period_of_day
      state: >-
        {% set elevation = state_attr('sun.sun', 'elevation') %}
        {% set rising = state_attr('sun.sun', 'rising') %}
        {%- if elevation <= -12 -%}
          night
        {%- elif -12 < elevation <= -6 -%}
          {{ 'dawn' if rising else 'dusk' }}
        {%- else -%}
          day
        {%- endif -%}
      icon: >-
        {% set elevation = state_attr('sun.sun', 'elevation') %}
        {% set rising = state_attr('sun.sun', 'rising') %}
        {%- if elevation <= -12 -%}
          mdi:weather-night
        {%- elif -12 < elevation <= -6 -%}
          mdi:weather-sunset-{{ 'up' if rising else 'down' }}
        {% else %}
          mdi:weather-sunny
        {% endif %}
    - name: cyberpower ups
      unique_id: cyberpower_ups
      state: >-
        {% set runtime = states('sensor.cyberpower_battery_runtime') | int %}
        {% if runtime < 180 %}three
        {% elif runtime < 300 %}five
        {% elif runtime < 600 %}ten
        {% elif runtime < 1200 %}twenty
        {% else %}okay
        {% endif %}
    - name: "target humidity max"
      unique_id: target_humidity_max
      state: >-
        {% set temperature = state_attr('weather.tomorrow_io_home_daily', 'temperature') | int %}
        {% if temperature < -20 %}25
        {% elif temperature < -10 %}30
        {% elif temperature < 0 %}35
        {% elif temperature < 10 %}40
        {% elif temperature < 20 %}45
        {% else %}55
        {% endif %}
    - name: "target humidity min"
      unique_id: target_humidity_min
      state: >-
        {% if   state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -20 %}15
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int < -10 %}20
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <   0 %}25
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  10 %}30
        {% elif state_attr('weather.tomorrow_io_home_daily', 'temperature') | int <  20 %}35
        {% else %} 40 {% endif %}
    - name: "Current Temperature"
      unique_id: current_temperature
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'temperature') }}"
      unit_of_measurement: "°F"
      device_class: temperature
    - name: "Current Humidity"
      icon: mdi:water-percent
      unique_id: current_humidity
      device_class: humidity
      unit_of_measurement: "%"
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'humidity') }}"
    - name: "daily_high"
      unique_id: daily_high
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].temperature }}"
      unit_of_measurement: "°F"
      device_class: temperature
      icon: mdi:thermometer
    - name: "Todays Low"
      unique_id: todays_low
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].templow }}"
      unit_of_measurement: "°F"
      device_class: temperature
      icon: mdi:thermometer
    - name: "Precipitation Amount"
      unique_id: precipitation_amount
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].precipitation }}"
    - name: "Precipitation Probability"
      unique_id: precipitation_probability
      state: "{{ state_attr('weather.tomorrow_io_home_daily', 'forecast')[0].precipitation_probability | round | int }}"
    - name: "circadian brightness"
      unique_id: circadian_brightness
      state: "{{ state_attr('switch.adaptive_lighting_default', 'brightness_pct') }}"
    - name: Exterior Humidity
      icon: mdi:water-percent
      unique_id: exterior_humidity
      device_class: humidity
      unit_of_measurement: "%"
      state: >-
        {{ (( float(states('sensor.weatherflow_tempest_humidity')) +
              float(states('sensor.outdoor_pir_humidity')) +
              float(states('sensor.current_humidity'))) / 3) | round(2) }}

    ############################
    ## HVAC Sensors
    - name: "Lower Level Temperature"
      unique_id: lower_level_temperature
      state: "{{ state_attr('climate.lower_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Main Level Temperature"
      unique_id: main_level_temperature
      state: "{{ state_attr('climate.main_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    - name: "Upper Level Temperature"
      unique_id: upper_level_temperature
      state: "{{ state_attr('climate.upper_level', 'current_temperature') }}"
      unit_of_measurement: "°F"
      icon: mdi:thermometer
    ##
    - name: "Lower Level Hold State"
      unique_id: lower_level_hold_state
      state: "{{ state_attr('climate.lower_level', 'hold_state') }}"
    - name: "Main Level Hold State"
      unique_id: main_level_hold_state
      state: "{{ state_attr('climate.main_level', 'hold_state') }}"
    - name: "Upper Level Hold State"
      unique_id: upper_level_hold_state
      state: "{{ state_attr('climate.upper_level', 'hold_state') }}"
    ##
    - name: "Lower Level HVAC Action"
      unique_id: lower_level_hvac_action
      state: "{{ state_attr('climate.lower_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    - name: "Main Level HVAC Action"
      unique_id: main_level_hvac_action
      state: "{{ state_attr('climate.main_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    - name: "Upper Level HVAC Action"
      unique_id: upper_level_hvac_action
      state: "{{ state_attr('climate.upper_level', 'hvac_action') }}"
      icon: mdi:air-conditioner
    ##
    - name: "Outdoor HVAC Temperature"
      unique_id: outdoor_hvac_temperature
      state: "{{ state_attr('climate.main_level', 'outdoor_temperature') }}"
      unit_of_measurement: "°F"
    ##
    - name: "HVAC Humidity"
      unique_id: hvac_humidity
      state: "{{ state_attr('climate.main_level', 'current_humidity') }}"
      unit_of_measurement: "%"
    ############################
