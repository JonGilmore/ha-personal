---
# #############################
# # 10 second videos
# video_driveway:
#   alias: "driveway video"
#   sequence:
#     - service: shell_command.cam_driveway_vid
#       data:
#         filename: /tmp/driveway.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/driveway.mp4"
# video_daisy:
#   alias: "Daisy video"
#   sequence:
#     - service: shell_command.cam_daisy_vid
#       data:
#         filename: /tmp/daisy.mp4
#     - delay:
#         seconds: 13
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/daisy.mp4"
# video_deck:
#   alias: "deck video"
#   sequence:
#     - service: shell_command.cam_deck_vid
#       data:
#         filename: /tmp/deck.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/deck.mp4"
# video_deckstairs:
#   alias: "deckstairs video"
#   sequence:
#     - service: shell_command.cam_deckstairs_vid
#       data:
#         filename: /tmp/deckstairs.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/deckstairs.mp4"
# video_garage:
#   alias: "garage video"
#   sequence:
#     - service: shell_command.cam_garage_vid
#       data:
#         filename: /tmp/garage.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/garage.mp4"
# video_kitchen:
#   alias: "kitchen video"
#   sequence:
#     - service: shell_command.cam_kitchen_vid
#       data:
#         filename: /tmp/kitchen.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/kitchen.mp4"
# video_doorbell:
#   alias: "doorbell video"
#   sequence:
#     - service: shell_command.cam_doorbell_vid
#       data:
#         filename: /tmp/doorbell.mp4
#     - delay:
#         seconds: 12
#     - service: telegram_bot.send_video
#       data_template:
#         file: "/tmp/doorbell.mp4"

alarm:
  alias: "alarm"
  sequence:
    - service: notify.telegram_jon
      data_template:
        message: "⚠️ alarm active, do you want to disable this?"
        data:
          inline_keyboard:
            - "Yes:/turnoffnotification, No:/do_nothing"
    - service: media_player.volume_set
      data:
        entity_id: media_player.office_googlehome, media_player.main_display, media_player.basement_googlehome
        volume_level: "0.90"
    - service: tts.google_say
      data:
        entity_id: media_player.office_googlehome, media_player.main_display, media_player.basement_googlehome
        message: "alarm active! disable this on the keypad or on your phone!"
    # - service: script.turn_on
    #   entity_id: script.send_videos
    - service: script.turn_on
      entity_id: script.alarm_loop

alarm_loop:
  alias: "alarm loop"
  sequence:
    - condition: state
      entity_id: input_boolean.alarm_notifier
      state: "on"
    - delay:
        seconds: 60
    - service: script.turn_on
      entity_id: script.alarm

# check if the garage doors are violated & notify & close
garage_doors_check_and_close:
  alias: Garage Doors Check and Close
  sequence:
    - choose:
        conditions:
          condition: or
          conditions:
            - condition: state
              entity_id: sensor.elkm1_double_garage
              state: "Violated"
            - condition: state
              entity_id: sensor.elkm1_single_garage
              state: "Violated"
        sequence:
          - service: notify.telegram_jon
            data_template:
              message: >
                {% set double_garage_status = states('sensor.elkm1_double_garage') %}
                {% set single_garage_status = states('sensor.elkm1_single_garage') %}
                {% if double_garage_status == 'Violated' %}
                  Double garage door is open.
                {% endif %}
                {% if single_garage_status == 'Violated' %}
                  Single garage door is open.
                {% endif %}
                {% if double_garage_status == 'Violated' and single_garage_status == 'Violated' %}
                  Both garage doors are open.
                {% endif %}
          - service: cover.close_cover
            target:
              entity_id:
                - cover.double_garage_door
                - cover.single_garage_door
      default:
        - service: system_log.write
          data_template:
            message: "Garage door check was all good, nothing to do because both doors are closed."
            level: info

lock_doors:
  alias: "lock doors"
  sequence:
    - choose: # check  if vacation mode is on, then lock all doors
        - conditions: "{{ states('binary_sensor.vacation') == 'on' }}"
          sequence:
            - service: notify.telegram_jon
              data_template:
                title: "🔒 Vacation is on, locked all doors"
                message: "Hopefully you dont get locked out... 💀"
            - delay: "00:01:30" # wait 90s before locking the doors so we can get out the garage
            - service: lock.lock
              data:
                entity_id:
                  - lock.garage_lock
                  - lock.workshop_lock
                  - lock.mudroom_lock
    - choose: # check the locks, notify & lock if unlocked
        - conditions: "{{ states('sensor.number_of_non_vacation_doors_unlocked') | int > 0 }}"
          sequence:
            - service: notify.telegram_jon
              data_template:
                title: "🔒 {{ states('sensor.number_of_non_vacation_doors_unlocked') }} door(s) UNLOCKED!"
                message: "Locking {{ states('sensor.non_vacation_doors_unlocked') }}"
            - service: lock.lock
              data:
                entity_id:
                  - lock.workshop_lock
                  - lock.mudroom_lock
      default:
        - service: system_log.write
          data_template:
            message: "Leaving, nothing to do though."
            level: info

fans_off:
  alias: fans off
  sequence:
    - service: homeassistant.turn_off
      target:
        entity_id: group.all_fans

# send_videos:
#   alias: "send videos"
#   sequence:
#     - service: script.turn_on
#       entity_id:
#         - script.video_driveway
#         - script.video_doorbell
#         - script.video_kitchen

tvs_notify:
  alias: "notify all tvs"
  fields:
    msg:
      description: "message to send to tvs"
      example: "Doorbell rang!"
  sequence:
    - action: notify.sunroom_tv
      data:
        message: "{{ msg }}"
    - action: notify.great_room_tv
      data:
        message: "{{ msg }}"
    - action: notify.garage_tv
      data:
        message: "{{ msg }}"
    - action: notify.media_room_tv
      data:
        message: "{{ msg }}"
    - action: notify.gym_tv
      data:
        message: "{{ msg }}"

tvs_off:
  alias: "all tvs off"
  sequence:
    - service: media_player.turn_off
      entity_id:
        - media_player.sunroom_tv
        - media_player.office_tv
        - media_player.gym_tv
        - media_player.great_room_tv
        - media_player.media_room_tv
        - media_player.main_bedroom_tv

tvs_off_except_mainbed:
  alias: "all tvs off except main bed"
  sequence:
    - service: media_player.turn_off
      entity_id:
        - media_player.sunroom_tv
        - media_player.office_tv
        - media_player.gym_tv
        - media_player.great_room_tv
        - media_player.media_room_tv

# popup_camera:
#   sequence:
#     - service: browser_mod.command
#       data_template:
#         command: more-info
#         entity_id: "{{ camera }}"
#         deviceID:
#           - "{{ deviceID }}"

# set_temperature:
#   sequence:
#     - service: climate.set_temperature
#       data_template:
#         entity_id: "{{ entity_id }}"
#         temperature: "{{ temperature }}"
#         hvac_mode: "{{ mode }}"

# sonos_say:
#   sequence:
#     - service: sonos.snapshot
#       data_template:
#         entity_id: "{{ sonos_entity }}"
#     - service: sonos.unjoin
#       data_template:
#         entity_id: "{{ sonos_entity }}"
#     - service: media_player.volume_set
#       data_template:
#         entity_id: "{{ sonos_entity }}"
#         volume_level: "{{ volume }}"
#     - service: tts.google_say
#       data_template:
#         entity_id: "{{ sonos_entity }}"
#         message: "{{ message }}"
#     - delay: "{{ delay }}"
#     - service: sonos.restore
#       data_template:
#         entity_id: "{{ sonos_entity }}"

# vacuum_kitchen:
#   sequence:
#     - service: vacuum.send_command
#       data:
#         entity_id: "vacuum.main_dwayne"
#         command: "zoned_cleanup"
#         params:
#           "zone_ids": ["kitchen"]

# vacuum_foyer:
#   sequence:
#     - service: vacuum.send_command
#       data:
#         entity_id: "vacuum.main_dwayne"
#         command: "zoned_cleanup"
#         params:
#           "zone_ids": ["foyer"]

# jon_meeting:
#   sequence:
#     - service: tts.google_say
#       entity_id: media_player.kitchen
#       data_template:
#         message: |
#           {% if is_state("binary_sensor.macbook_pro_camera_in_use", "on") -%}
#             Jon is probably in a meeting right now.
#           {%- else -%}
#             Jon doesn't appear to be in a meeting right now
#           {%- endif %}
#         cache: false

# main_bedroom_off:
#   alias: "main bedroom off"
#   sequence:
#     - service: homeassistant.turn_off
#       target:
#         entity_id:
#           - light.master_entry_lamp
#           - light.sitting_room_lamp
#           - light.jons_lamp_lifx
#           - switch.lauras_lamp_lifx
#     - service: scene.turn_on
#       entity_id: scene.equipment_room_enclosure_device_001_ph_master_off

send_dynamic_notification:
  alias: "send dynamic notification"
  sequence:
    - service: notify.mobile_app_jons_iphone
      data:
        title: '{{label | title}} detected on {{trigger.payload_json["after"]["camera"] | replace("_", "") | title }}'
        message: "{{label | title}} detected in {{after_zones[0] }}"
        data:
          url: "https://homeassistant.gilmore.cloud/api/{{id}}/{{camera}}/clip.mp4"
          tag: "{{ id }}"
          group: frigate-notification-{{camera}}
          clickAction: "https://homeassistant.gilmore.cloud/api/{{id}}/{{camera}}/clip.mp4"
          image: "/api/frigate/notifications/{{id}}/snapshot.jpg"
          attachment:
            url: "/api/frigate/notifications/{{id}}/snapshot.jpg"

night_adaptive_lighting:
  alias: "night adaptive lighting"
  description: "script to turn on or off adaptive lighting sleep mode"
  fields:
    state:
      description: "state of adaptive lighting"
      example: "valid values are turn_on or turn_off"
  sequence:
    - action: "homeassistant.{{ state }}"
      target:
        entity_id:
          - switch.adaptive_lighting_sleep_mode_default
          - switch.adaptive_lighting_sleep_mode_main_bathroom

interior_lights_off:
  alias: "interior lights off"
  sequence:
    - service: button.press
      entity_id: button.basement_equipment_room_homeowner_kp02_position_1_keypad_interior_lights_off
    - service: homeassistant.turn_off
      target:
        entity_id:
          - light.jons_lamp
          - light.lauras_lamp

all_off:
  alias: "all off"
  sequence:
    - service: button.press
      entity_id: button.basement_equipment_room_homeowner_kp01_position_1_keypad_all_off
    - service: homeassistant.turn_off
      target:
        entity_id:
          - light.jons_lamp
          - light.lauras_lamp

movie_on:
  alias: "movie on"
  sequence:
    - service: cover.close_cover
      entity_id: cover.basement_media_room_shades
    - service: light.turn_on
      entity_id: light.basement_media_room_cabinets

set_lock_code:
  alias: Set Lock Code
  icon: mdi:arrow-right-bold-circle
  sequence:
    - service: zwave_js.set_lock_usercode
      target:
        entity_id:
          - lock.garage_lock
          - lock.workshop_lock
          - lock.mudroom_lock
      data:
        code_slot: '{{ states("input_select.lock_code_slot") | int }}'
        usercode: >
          {% if is_state('input_select.lock_code_slot','01') %}
            {{ "%04d" % states('input_number.lock_code')|int }}
          {% elif is_state('input_select.lock_code_slot','02') %}
            {{ "%04d" % states('input_number.lock_code')|int }}
          {% elif is_state('input_select.lock_code_slot','03') %}
            {{ "%04d" % states('input_number.lock_code')|int }}
          {% elif is_state('input_select.lock_code_slot','04') %}
            {{ "%04d" % states('input_number.lock_code')|int }}
          {% endif %}

delete_lock_code:
  alias: Delete Lock Code
  icon: mdi:delete-circle
  sequence:
    - service: zwave_js.clear_lock_usercode
      target:
        entity_id:
          - lock.garage_lock
          - lock.workshop_lock
          - lock.mudroom_lock
      data:
        code_slot: '{{ states("input_select.lock_code_slot") | int }}'

main_bed_position:
  alias: "main bed position"
  fields:
    state:
      description: "bed position"
      example: "valid values are Not at preset, Favorite, Read, Watch TV, Flat, Zero G, Snore"
    side:
      description: "bed side"
      example: "valid values are left, right"
  sequence:
    - service: select.select_option
      target:
        entity_id: select.sleepnumber_firmness_control_sleepiq_dual_boxed_foundation_preset_{{side}}
      data:
        option: "{{state}}"

crestron_enter_standby:
  alias: "crestron enter standby"
  icon: mdi:tablet
  sequence:
    - service: shell_command.crestron
      data:
        standby_action: 'EnterStandby'
crestron_exit_standby:
  alias: "crestron exit standby"
  icon: mdi:tablet-cellphone
  sequence:
    - service: shell_command.crestron
      data:
        standby_action: 'ExitStandby'

frontyard_ptz:
  alias: "frontyard ptz"
  icon: mdi:cctv
  sequence:
    - action: onvif.ptz
      target:
        entity_id: camera.frontyard_onvif_mediaprofile_channel1_mainstream
      data:
        move_mode: GotoPreset
        preset: >
          {% if is_state('input_select.frontyard_ptz', 'home') %}
            1
          {% elif is_state('input_select.frontyard_ptz', 'right-road') %}
            2
          {% elif is_state('input_select.frontyard_ptz', 'door') %}
            3
          {% elif is_state('input_select.frontyard_ptz', 'right-front-yard') %}
            4
          {% elif is_state('input_select.frontyard_ptz', 'left-front-yard') %}
            5
          {% elif is_state('input_select.frontyard_ptz', 'right-road-zoom') %}
            6
          {% endif %}

unlock_grilldeck:
  alias: unlock grilldeck
  icon: mdi:lock-open
  sequence:
    - service: lock.unlock
      target:
        entity_id: lock.mudroom_lock

toggle_single_garage:
  alias: toggle single garage
  icon: mdi:garage
  sequence:
    - service: cover.toggle
      target:
        entity_id: cover.single_garage_door

toggle_motion_lights:
  alias: toggle motion lights
  icon: mdi:motion-sensor
  sequence:
    - service: homeassistant.toggle
      target:
        entity_id: input_boolean.block_interior_motion_lights

exterior_lights_off:
  alias: exterior lights off
  icon: mdi:lightbulb-off
  sequence:
    - service: homeassistant.turn_off
      target:
        entity_id: group.exterior_lights

upstairs_lights_off:
  alias: upstairs lights off
  icon: mdi:lightbulb-off
  sequence:
    - service: homeassistant.turn_off
      target:
        entity_id: group.upstairs_lights

main_lights_off:
  alias: main lights off
  icon: mdi:lightbulb-off
  sequence:
    - service: homeassistant.turn_off
      target:
        entity_id: group.main_floor_lights

basement_lights_off:
  alias: basement lights off
  icon: mdi:lightbulb-off
  sequence:
    - service: homeassistant.turn_off
      target:
        entity_id: group.basement_lights
