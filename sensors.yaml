---
# Get the mean value of the different humidity sensors
- platform: min_max
  name: House Humidity
  round_digits: 0
  type: mean
  entity_ids:
    - sensor.office_multi_relative_humidity_measurement
    - sensor.master_entry_humidity
    - sensor.sunroom_humidity

# Presence Sensors
- platform: mqtt
  state_topic: "monitor/pizero1/jonspixelbt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Living Room Jon"
- platform: mqtt
  state_topic: "monitor/pizero2/jonspixelbt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Garage Jon"
- platform: mqtt
  state_topic: "monitor/pi-presence1/jonspixelbt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Theatre Jon"
- platform: mqtt
  state_topic: "monitor/pi-ovpn1/jonspixelbt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Master Jon"

- platform: mqtt
  state_topic: "monitor/pizero1/laurasiphonebt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Living Room Laura"
- platform: mqtt
  state_topic: "monitor/pizero2/laurasiphonebt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Garage Laura"
- platform: mqtt
  state_topic: "monitor/pi-presence1/laurasiphonebt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Theatre Laura"
- platform: mqtt
  state_topic: "monitor/pi-ovpn1/laurasiphonebt"
  value_template: "{{ value_json.confidence }}"
  unit_of_measurement: "%"
  name: "Tracker Master Laura"

- platform: min_max
  name: "Jon Occupancy Confidence"
  type: max
  round_digits: 0
  entity_ids:
    - sensor.tracker_living_room_jon
    - sensor.tracker_garage_jon
    - sensor.tracker_theatre_jon
    - sensor.tracker_master_jon
- platform: min_max
  name: "Laura Occupancy Confidence"
  type: max
  round_digits: 0
  entity_ids:
    - sensor.tracker_living_room_laura
    - sensor.tracker_garage_laura
    - sensor.tracker_theatre_laura
    - sensor.tracker_master_laura
- platform: min_max
  name: "House Occupancy Confidence"
  type: max
  round_digits: 0
  entity_ids:
    - sensor.tracker_living_room_jon
    - sensor.tracker_garage_jon
    - sensor.tracker_theatre_jon
    - sensor.tracker_master_jon
    - sensor.tracker_living_room_laura
    - sensor.tracker_garage_laura
    - sensor.tracker_theatre_laura
    - sensor.tracker_master_laura

# Template Sensors
- platform: template
  sensors:
    armed_status:
      entity_id: alarm_control_panel.area001
      value_template: '{{ states.alarm_control_panel.area001.attributes["armed_status"] }}'
      friendly_name: "House Armed Status"
    arm_up_state:
      entity_id: alarm_control_panel.area001
      value_template: '{{ states.alarm_control_panel.area001.attributes["arm_up_state"] }}'
      friendly_name: "House Arm Up State"
    alarm_state:
      entity_id: alarm_control_panel.area001
      value_template: '{{ states.alarm_control_panel.area001.attributes["alarm_state"] }}'
      friendly_name: "House Alarm State"
    alarm_trouble:
      entity_id: sensor.elkm1
      value_template: '{{ states.sensor.elkm1.attributes["system_trouble_status"] }}'
      friendly_name: "Alarm Trouble"
    garage_double_state:
      entity_id: sensor.double_garage
      value_template: >-
        {% if states.sensor.double_garage.state == 'Normal' %}closed
        {% elif states.sensor.double_garage.state == 'Violated' %}open
        {% else %}unknown{% endif %}
      friendly_name: "Garage Double State"
    garage_single_state:
      entity_id: sensor.single_garage
      value_template: >-
        {% if states.sensor.single_garage.state == 'Normal' %}closed
        {% elif states.sensor.single_garage.state == 'Violated' %}open
        {% else %}unknown{% endif %}
      friendly_name: "Garage Single State"
    garage_temperature:
      entity_id: climate.garage_thermostat
      value_template: '{{ states.climate.garage_thermostat.attributes["current_temperature"] }}'
      friendly_name: "Garage Temperature"
    garage_fridge_power:
      entity_id: switch.garage_fridge
      value_template: '{{ states.switch.garage_fridge.attributes["current_power_w"] }}'
      friendly_name: "Garage Fridge Power"
    garage_fridge_energy:
      entity_id: switch.garage_fridge
      value_template: '{{ states.switch.garage_fridge.attributes["today_energy_kwh"] }}'
      friendly_name: "Garage Fridge Energy"
    sensor_count:
      friendly_name: "Number of Sensors"
      value_template: >
        {%- set domains = ['sensor'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    lights_on_number:
      entity_id: sensor.time
      friendly_name: Lights On
      unit_of_measurement: "On"
      value_template: "{{ states.light|selectattr('state', 'equalto', 'on')|list|length }}"
    doors_locked:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Doors Locked
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|map(attribute='name')| list|join(', ') }}"
    doors_locked_entities:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Doors Locked Entities
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|map(attribute='entity_id')| list|join(', ') }}"
    doors_locked_number:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Number of Doors Locked
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'locked')|list|length }}"
    doors_unlocked:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Doors Unlocked
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|map(attribute='name')| list|join(', ') }}"
    doors_unlocked_entities:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Doors Unlocked Entities
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|map(attribute='entity_id')| list|join(', ') }}"
    doors_unlocked_number:
      entity_id:
        - lock.front_door_lock
        - lock.garage_door_lock
      friendly_name: Number of Doors Unlocked
      value_template: "{{ states.lock|selectattr('state', 'equalto', 'unlocked')|list|length }}"
    people_home:
      entity_id:
        - person.jon
        - person.laura
      friendly_name: People Home
      value_template: "{{ states.person|selectattr('state', 'equalto', 'home')|list|map(attribute='name')| list|join(', ') }}"
    people_home_number:
      entity_id:
        - person.jon
        - person.laura
      friendly_name: Number of People Home
      value_template: "{{ states.person|selectattr('state', 'equalto', 'home')|list|length }}"

# DARK SKY
- platform: darksky
  api_key: !secret darksky_api
  forecast:
    - 0
    - 1
    - 2
  monitored_conditions:
    - summary
    - icon
    - nearest_storm_distance
    - nearest_storm_bearing
    - precip_type
    - precip_intensity
    - precip_probability
    - temperature
    - apparent_temperature
    - dew_point
    - wind_speed
    - wind_bearing
    - cloud_cover
    - humidity
    - pressure
    - visibility
    - ozone
    - minutely_summary
    - hourly_summary
    - daily_summary
    - temperature_high
    - temperature_low
    - apparent_temperature_high
    - apparent_temperature_low
    - precip_intensity_max

# # # DARKNESS SENSORS
- platform: template
  sensors:
    period_of_day:
      friendly_name: "period of the day"
      value_template: >-
        {% if   (as_timestamp(states.sun.sun.attributes.next_dusk)) - (as_timestamp(states.sun.sun.attributes.next_setting)) < 0 %}dusk
        {% elif (as_timestamp(states.sun.sun.attributes.next_rising)) - (as_timestamp(states.sun.sun.attributes.next_dawn)) < 0 %}dawn
        {% elif (states.sun.sun.attributes.elevation) < -4 %}night
        {% else %}day
        {% endif %}
      icon_template: >-
        {% if   (as_timestamp(states.sun.sun.attributes.next_dusk)) - (as_timestamp(states.sun.sun.attributes.next_setting)) < 0 %}mdi:weather-sunset-down
        {% elif (as_timestamp(states.sun.sun.attributes.next_rising)) - (as_timestamp(states.sun.sun.attributes.next_dawn)) < 0 %}mdi:weather-sunset-up
        {% elif (states.sun.sun.attributes.elevation) < -4 %}mdi:weather-night
        {% else %}mdi:weather-sunny
        {% endif %}
- platform: illuminance
  name: DSS Illuminance
  entity_id: sensor.dark_sky_icon

# Target Humidity States
- platform: template
  sensors:
    target_humidity_max_winter:
      value_template: >-
        {% if   states.sensor.dark_sky_temperature.state | int < -20 %}25
        {% elif states.sensor.dark_sky_temperature.state | int < -10 %}30
        {% elif states.sensor.dark_sky_temperature.state | int <   0 %}35
        {% elif states.sensor.dark_sky_temperature.state | int <  10 %}40
        {% elif states.sensor.dark_sky_temperature.state | int <  20 %}45
        {% else %} 55 {% endif %}
      friendly_name: "Target Humidity - Max"
    target_humidity_min_winter:
      value_template: >-
        {% if   states.sensor.dark_sky_temperature.state | int < -20 %}15
        {% elif states.sensor.dark_sky_temperature.state | int < -10 %}20
        {% elif states.sensor.dark_sky_temperature.state | int <   0 %}25
        {% elif states.sensor.dark_sky_temperature.state | int <  10 %}30
        {% elif states.sensor.dark_sky_temperature.state | int <  20 %}35
        {% else %} 40 {% endif %}
      friendly_name: "Target Humidity - Min"

# HVAC tracking
- platform: history_stats
  name: daily hvac on time
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: time
  end: "{{ now() }}"
  duration:
    hours: 24
- platform: history_stats
  name: daily hvac duty cycle
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: ratio
  end: "{{ now() }}"
  duration:
    hours: 24
- platform: history_stats
  name: daily hvac on count
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: count
  end: "{{ now() }}"
  duration:
    hours: 24

- platform: history_stats
  name: weekly hvac on time since past monday
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: time
  start: "{{ as_timestamp( now().replace(hour=0).replace(minute=0).replace(second=0) ) - now().weekday() * 86400 }}"
  end: "{{ now() }}"
- platform: history_stats
  name: weekly hvac on time rolling
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: time
  end: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  duration:
    days: 7
- platform: history_stats
  name: weekly hvac duty cycle
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: ratio
  start: "{{ as_timestamp( now().replace(hour=0).replace(minute=0).replace(second=0) ) - now().weekday() * 86400 }}"
  end: "{{ now() }}"
- platform: history_stats
  name: weekly hvac on count
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: count
  start: "{{ as_timestamp( now().replace(hour=0).replace(minute=0).replace(second=0) ) - now().weekday() * 86400 }}"
  end: "{{ now() }}"

- platform: history_stats
  name: monthly hvac on time since 1st
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: time
  start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0).replace(day=1) }}"
  end: "{{ now() }}"
- platform: history_stats
  name: monthly hvac on time rolling
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: time
  end: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
  duration:
    days: 30
- platform: history_stats
  name: monthly hvac duty cycle
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: ratio
  start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0).replace(day=1) }}"
  end: "{{ now() }}"
- platform: history_stats
  name: monthly hvac on count
  entity_id: binary_sensor.hvac_status
  state: "on"
  type: count
  start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0).replace(day=1) }}"
  end: "{{ now() }}"

# LOAD SENSORS
- platform: template
  sensors:
    master_sitting_chair_occupied:
      value_template: >-
        {% if states.sensor.master_sitting_chair.state | int < -1000000 %}occupied
        {% else %} unoccupied {% endif %}
      friendly_name: "Master Sitting Chair Occupied"
    master_bed_occupied:
      value_template: >-
        {% if (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed.state == "on")
        or (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed.state == "on") %}occupied
        {% else %} unoccupied {% endif %}
      friendly_name: "Master Bed Occupied"
    master_bed_people:
      value_template: >-
        {% if (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed.state == "on")
        and (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed.state == "on") %}both
        {% elif (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_jon_is_in_bed.state == "on")
        or (states.binary_sensor.sleepnumber_firmness_control_sleepiq_dual_boxed_laura_is_in_bed.state == "on") %}one
        {% else %} nobody {% endif %}
      friendly_name: "Master Bed People"

- platform: version
  name: HA Version
  scan_interval: 86400

- platform: command_line
  name: Public IP
  command: "dig +short myip.opendns.com @resolver1.opendns.com"
  scan_interval: 1800

- platform: command_line
  name: CPU Temperature
  command: "cat /sys/class/thermal/thermal_zone3/temp"
  value_template: "{{ value | multiply(0.001) | round(2) }}"
  unit_of_measurement: "°C"
  scan_interval: 600

- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /
    - type: memory_use_percent
    - type: load_1m
    - type: load_5m
    - type: load_15m
    - type: last_boot
- platform: uptime

# fully kiosk sensors
- platform: template
  sensors:
    basement_tablet_battery:
      friendly_name: basement tablet battery
      unit_of_measurement: "%"
      value_template: "{{ states.sensor.basement_tablet.attributes.batteryLevel }}"
